// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)

// Get key type
func getSettingVpnVpncAdvancedKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_VPN_VPNC_KEY_DOMAIN:
		t = ktypeString
	case NM_SETTING_VPN_VPNC_KEY_VENDOR:
		t = ktypeString
	case NM_SETTING_VPN_VPNC_KEY_APP_VERSION:
		t = ktypeString
	case NM_SETTING_VPN_VPNC_KEY_SINGLE_DES:
		t = ktypeBoolean
	case NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION:
		t = ktypeBoolean
	case NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE:
		t = ktypeString
	case NM_SETTING_VPN_VPNC_KEY_DHGROUP:
		t = ktypeString
	case NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD:
		t = ktypeString
	case NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT:
		t = ktypeUint32
	case NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT:
		t = ktypeUint32
	case NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT:
		t = ktypeUint32
	}
	return
}

// Check is key in current setting field
func isKeyInSettingVpnVpncAdvanced(key string) bool {
	switch key {
	case NM_SETTING_VPN_VPNC_KEY_DOMAIN:
		return true
	case NM_SETTING_VPN_VPNC_KEY_VENDOR:
		return true
	case NM_SETTING_VPN_VPNC_KEY_APP_VERSION:
		return true
	case NM_SETTING_VPN_VPNC_KEY_SINGLE_DES:
		return true
	case NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION:
		return true
	case NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE:
		return true
	case NM_SETTING_VPN_VPNC_KEY_DHGROUP:
		return true
	case NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD:
		return true
	case NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT:
		return true
	case NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT:
		return true
	case NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT:
		return true
	}
	return false
}

// Get key's default value
func getSettingVpnVpncAdvancedKeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		Logger.Error("invalid key:", key)
	case NM_SETTING_VPN_VPNC_KEY_DOMAIN:
		valueJSON = `""`
	case NM_SETTING_VPN_VPNC_KEY_VENDOR:
		valueJSON = `""`
	case NM_SETTING_VPN_VPNC_KEY_APP_VERSION:
		valueJSON = `""`
	case NM_SETTING_VPN_VPNC_KEY_SINGLE_DES:
		valueJSON = `false`
	case NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION:
		valueJSON = `false`
	case NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE:
		valueJSON = `""`
	case NM_SETTING_VPN_VPNC_KEY_DHGROUP:
		valueJSON = `""`
	case NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD:
		valueJSON = `""`
	case NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT:
		valueJSON = `0`
	case NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT:
		valueJSON = `0`
	case NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT:
		valueJSON = `0`
	}
	return
}

// Get JSON value generally
func generalGetSettingVpnVpncAdvancedKeyJSON(data _ConnectionData, key string) (value string) {
	switch key {
	default:
		Logger.Error("generalGetSettingVpnVpncAdvancedKeyJSON: invalide key", key)
	case NM_SETTING_VPN_VPNC_KEY_DOMAIN:
		value = getSettingVpnVpncKeyDomainJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_VENDOR:
		value = getSettingVpnVpncKeyVendorJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_APP_VERSION:
		value = getSettingVpnVpncKeyAppVersionJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_SINGLE_DES:
		value = getSettingVpnVpncKeySingleDesJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION:
		value = getSettingVpnVpncKeyNoEncryptionJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE:
		value = getSettingVpnVpncKeyNatTraversalModeJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_DHGROUP:
		value = getSettingVpnVpncKeyDhgroupJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD:
		value = getSettingVpnVpncKeyPerfectForwardJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT:
		value = getSettingVpnVpncKeyLocalPortJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT:
		value = getSettingVpnVpncKeyDpdIdleTimeoutJSON(data)
	case NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT:
		value = getSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data)
	}
	return
}

// Set JSON value generally
func generalSetSettingVpnVpncAdvancedKeyJSON(data _ConnectionData, key, valueJSON string) {
	switch key {
	default:
		Logger.Error("generalSetSettingVpnVpncAdvancedKeyJSON: invalide key", key)
	case NM_SETTING_VPN_VPNC_KEY_DOMAIN:
		setSettingVpnVpncKeyDomainJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_VENDOR:
		setSettingVpnVpncKeyVendorJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_APP_VERSION:
		setSettingVpnVpncKeyAppVersionJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_SINGLE_DES:
		setSettingVpnVpncKeySingleDesJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION:
		setSettingVpnVpncKeyNoEncryptionJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE:
		setSettingVpnVpncKeyNatTraversalModeJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_DHGROUP:
		setSettingVpnVpncKeyDhgroupJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD:
		setSettingVpnVpncKeyPerfectForwardJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT:
		setSettingVpnVpncKeyLocalPortJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT:
		setSettingVpnVpncKeyDpdIdleTimeoutJSON(data, valueJSON)
	case NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT:
		setSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data, valueJSON)
	}
	return
}

// Check if key exists
func isSettingVpnVpncKeyDomainExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN)
}
func isSettingVpnVpncKeyVendorExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR)
}
func isSettingVpnVpncKeyAppVersionExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION)
}
func isSettingVpnVpncKeySingleDesExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES)
}
func isSettingVpnVpncKeyNoEncryptionExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION)
}
func isSettingVpnVpncKeyNatTraversalModeExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE)
}
func isSettingVpnVpncKeyDhgroupExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP)
}
func isSettingVpnVpncKeyPerfectForwardExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD)
}
func isSettingVpnVpncKeyLocalPortExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT)
}
func isSettingVpnVpncKeyDpdIdleTimeoutExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT)
}
func isSettingVpnVpncKeyCiscoUdpEncapsPortExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT)
}

// Ensure field and key exists and not empty
func ensureFieldSettingVpnVpncAdvancedExists(data _ConnectionData, errs FieldKeyErrors, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME) {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME))
	}
}
func ensureSettingVpnVpncKeyDomainNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyDomainExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnVpncKeyDomain(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnVpncKeyVendorNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyVendorExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnVpncKeyVendor(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnVpncKeyAppVersionNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyAppVersionExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnVpncKeyAppVersion(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnVpncKeySingleDesNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeySingleDesExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnVpncKeyNoEncryptionNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyNoEncryptionExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnVpncKeyNatTraversalModeNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyNatTraversalModeExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnVpncKeyNatTraversalMode(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnVpncKeyDhgroupNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyDhgroupExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnVpncKeyDhgroup(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnVpncKeyPerfectForwardNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyPerfectForwardExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnVpncKeyPerfectForward(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnVpncKeyLocalPortNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyLocalPortExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnVpncKeyDpdIdleTimeoutNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyDpdIdleTimeoutExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnVpncKeyCiscoUdpEncapsPortNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnVpncKeyCiscoUdpEncapsPortExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT, NM_KEY_ERROR_MISSING_VALUE)
	}
}

// Getter
func getSettingVpnVpncKeyDomain(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN).(string)
	return
}
func getSettingVpnVpncKeyVendor(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR).(string)
	return
}
func getSettingVpnVpncKeyAppVersion(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION).(string)
	return
}
func getSettingVpnVpncKeySingleDes(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES).(bool)
	return
}
func getSettingVpnVpncKeyNoEncryption(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION).(bool)
	return
}
func getSettingVpnVpncKeyNatTraversalMode(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE).(string)
	return
}
func getSettingVpnVpncKeyDhgroup(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP).(string)
	return
}
func getSettingVpnVpncKeyPerfectForward(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD).(string)
	return
}
func getSettingVpnVpncKeyLocalPort(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT).(uint32)
	return
}
func getSettingVpnVpncKeyDpdIdleTimeout(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT).(uint32)
	return
}
func getSettingVpnVpncKeyCiscoUdpEncapsPort(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT).(uint32)
	return
}

// Setter
func setSettingVpnVpncKeyDomain(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN, value)
}
func setSettingVpnVpncKeyVendor(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR, value)
}
func setSettingVpnVpncKeyAppVersion(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION, value)
}
func setSettingVpnVpncKeySingleDes(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES, value)
}
func setSettingVpnVpncKeyNoEncryption(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION, value)
}
func setSettingVpnVpncKeyNatTraversalMode(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE, value)
}
func setSettingVpnVpncKeyDhgroup(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP, value)
}
func setSettingVpnVpncKeyPerfectForward(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD, value)
}
func setSettingVpnVpncKeyLocalPort(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT, value)
}
func setSettingVpnVpncKeyDpdIdleTimeout(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT, value)
}
func setSettingVpnVpncKeyCiscoUdpEncapsPort(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT, value)
}

// JSON Getter
func getSettingVpnVpncKeyDomainJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_DOMAIN))
	return
}
func getSettingVpnVpncKeyVendorJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_VENDOR))
	return
}
func getSettingVpnVpncKeyAppVersionJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_APP_VERSION))
	return
}
func getSettingVpnVpncKeySingleDesJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_SINGLE_DES))
	return
}
func getSettingVpnVpncKeyNoEncryptionJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION))
	return
}
func getSettingVpnVpncKeyNatTraversalModeJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE))
	return
}
func getSettingVpnVpncKeyDhgroupJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_DHGROUP))
	return
}
func getSettingVpnVpncKeyPerfectForwardJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD))
	return
}
func getSettingVpnVpncKeyLocalPortJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT))
	return
}
func getSettingVpnVpncKeyDpdIdleTimeoutJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT))
	return
}
func getSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT))
	return
}

// JSON Setter
func setSettingVpnVpncKeyDomainJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_DOMAIN))
}
func setSettingVpnVpncKeyVendorJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_VENDOR))
}
func setSettingVpnVpncKeyAppVersionJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_APP_VERSION))
}
func setSettingVpnVpncKeySingleDesJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_SINGLE_DES))
}
func setSettingVpnVpncKeyNoEncryptionJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION))
}
func setSettingVpnVpncKeyNatTraversalModeJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE))
}
func setSettingVpnVpncKeyDhgroupJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_DHGROUP))
}
func setSettingVpnVpncKeyPerfectForwardJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD))
}
func setSettingVpnVpncKeyLocalPortJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT))
}
func setSettingVpnVpncKeyDpdIdleTimeoutJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT))
}
func setSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT, valueJSON, getSettingVpnVpncAdvancedKeyType(NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT))
}

// Remover
func removeSettingVpnVpncKeyDomain(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DOMAIN)
}
func removeSettingVpnVpncKeyVendor(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_VENDOR)
}
func removeSettingVpnVpncKeyAppVersion(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_APP_VERSION)
}
func removeSettingVpnVpncKeySingleDes(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_SINGLE_DES)
}
func removeSettingVpnVpncKeyNoEncryption(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION)
}
func removeSettingVpnVpncKeyNatTraversalMode(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_NAT_TRAVERSAL_MODE)
}
func removeSettingVpnVpncKeyDhgroup(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DHGROUP)
}
func removeSettingVpnVpncKeyPerfectForward(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_PERFECT_FORWARD)
}
func removeSettingVpnVpncKeyLocalPort(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_LOCAL_PORT)
}
func removeSettingVpnVpncKeyDpdIdleTimeout(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT)
}
func removeSettingVpnVpncKeyCiscoUdpEncapsPort(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_VPNC_ADVANCED_SETTING_NAME, NM_SETTING_VPN_VPNC_KEY_CISCO_UDP_ENCAPS_PORT)
}
