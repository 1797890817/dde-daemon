// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)

// Get key type
func getSettingVpnOpenvpnKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_USERNAME:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS:
		t = ktypeUint32
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_CERT:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_CA:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_KEY:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS:
		t = ktypeUint32
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION:
		t = ktypeUint32
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP:
		t = ktypeString
	case NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP:
		t = ktypeString
	}
	return
}

// Check is key in current setting field
func isKeyInSettingVpnOpenvpn(key string) bool {
	switch key {
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_USERNAME:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_CERT:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_CA:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_KEY:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP:
		return true
	case NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP:
		return true
	}
	return false
}

// Get key's default value
func getSettingVpnOpenvpnKeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		logger.Error("invalid key:", key)
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_USERNAME:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS:
		valueJSON = `0`
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_CERT:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_CA:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_KEY:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS:
		valueJSON = `0`
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION:
		valueJSON = `0`
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP:
		valueJSON = `""`
	case NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP:
		valueJSON = `""`
	}
	return
}

// Get JSON value generally
func generalGetSettingVpnOpenvpnKeyJSON(data connectionData, key string) (value string) {
	switch key {
	default:
		logger.Error("generalGetSettingVpnOpenvpnKeyJSON: invalide key", key)
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE:
		value = getSettingVpnOpenvpnKeyRemoteJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE:
		value = getSettingVpnOpenvpnKeyConnectionTypeJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_USERNAME:
		value = getSettingVpnOpenvpnKeyUsernameJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS:
		value = getSettingVpnOpenvpnKeyPasswordFlagsJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD:
		value = getSettingVpnOpenvpnKeyPasswordJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_CERT:
		value = getSettingVpnOpenvpnKeyCertJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_CA:
		value = getSettingVpnOpenvpnKeyCaJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_KEY:
		value = getSettingVpnOpenvpnKeyKeyJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS:
		value = getSettingVpnOpenvpnKeyCertpassJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS:
		value = getSettingVpnOpenvpnKeyCertpassFlagsJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY:
		value = getSettingVpnOpenvpnKeyStaticKeyJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION:
		value = getSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP:
		value = getSettingVpnOpenvpnKeyRemoteIpJSON(data)
	case NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP:
		value = getSettingVpnOpenvpnKeyLocalIpJSON(data)
	}
	return
}

// Set JSON value generally
func generalSetSettingVpnOpenvpnKeyJSON(data connectionData, key, valueJSON string) (err error) {
	switch key {
	default:
		logger.Error("generalSetSettingVpnOpenvpnKeyJSON: invalide key", key)
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE:
		setSettingVpnOpenvpnKeyRemoteJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE:
		setSettingVpnOpenvpnKeyConnectionTypeJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_USERNAME:
		setSettingVpnOpenvpnKeyUsernameJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS:
		setSettingVpnOpenvpnKeyPasswordFlagsJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_PASSWORD:
		setSettingVpnOpenvpnKeyPasswordJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_CERT:
		setSettingVpnOpenvpnKeyCertJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_CA:
		setSettingVpnOpenvpnKeyCaJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_KEY:
		setSettingVpnOpenvpnKeyKeyJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS:
		setSettingVpnOpenvpnKeyCertpassJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS:
		setSettingVpnOpenvpnKeyCertpassFlagsJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY:
		setSettingVpnOpenvpnKeyStaticKeyJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION:
		setSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP:
		setSettingVpnOpenvpnKeyRemoteIpJSON(data, valueJSON)
	case NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP:
		setSettingVpnOpenvpnKeyLocalIpJSON(data, valueJSON)
	}
	return
}

// Check if key exists
func isSettingVpnOpenvpnKeyRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE)
}
func isSettingVpnOpenvpnKeyConnectionTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE)
}
func isSettingVpnOpenvpnKeyUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME)
}
func isSettingVpnOpenvpnKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS)
}
func isSettingVpnOpenvpnKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD)
}
func isSettingVpnOpenvpnKeyCertExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT)
}
func isSettingVpnOpenvpnKeyCaExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA)
}
func isSettingVpnOpenvpnKeyKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY)
}
func isSettingVpnOpenvpnKeyCertpassExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS)
}
func isSettingVpnOpenvpnKeyCertpassFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS)
}
func isSettingVpnOpenvpnKeyStaticKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY)
}
func isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION)
}
func isSettingVpnOpenvpnKeyRemoteIpExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP)
}
func isSettingVpnOpenvpnKeyLocalIpExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP)
}

// Ensure field and key exists and not empty
func ensureFieldSettingVpnOpenvpnExists(data connectionData, errs fieldErrors, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME) {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME))
	}
}
func ensureSettingVpnOpenvpnKeyRemoteNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyRemoteExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyRemote(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyConnectionTypeNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyConnectionTypeExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyConnectionType(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyUsernameNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyUsernameExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyUsername(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyPasswordFlagsNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyPasswordFlagsExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyPasswordNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyPasswordExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyCertNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyCertExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyCert(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyCaNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyCaExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyCa(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyKeyNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyKeyExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyKey(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyCertpassNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyCertpassExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyCertpass(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyCertpassFlagsNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyCertpassFlagsExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyStaticKeyNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyStaticKeyExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyStaticKey(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyStaticKeyDirectionNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyRemoteIpNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyRemoteIpExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyRemoteIp(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnOpenvpnKeyLocalIpNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnOpenvpnKeyLocalIpExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnOpenvpnKeyLocalIp(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP, NM_KEY_ERROR_EMPTY_VALUE)
	}
}

// Getter
func getSettingVpnOpenvpnKeyRemote(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE).(string)
	return
}
func getSettingVpnOpenvpnKeyConnectionType(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE).(string)
	return
}
func getSettingVpnOpenvpnKeyUsername(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME).(string)
	return
}
func getSettingVpnOpenvpnKeyPasswordFlags(data connectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS).(uint32)
	return
}
func getSettingVpnOpenvpnKeyPassword(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD).(string)
	return
}
func getSettingVpnOpenvpnKeyCert(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT).(string)
	return
}
func getSettingVpnOpenvpnKeyCa(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA).(string)
	return
}
func getSettingVpnOpenvpnKeyKey(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY).(string)
	return
}
func getSettingVpnOpenvpnKeyCertpass(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS).(string)
	return
}
func getSettingVpnOpenvpnKeyCertpassFlags(data connectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS).(uint32)
	return
}
func getSettingVpnOpenvpnKeyStaticKey(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY).(string)
	return
}
func getSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION).(uint32)
	return
}
func getSettingVpnOpenvpnKeyRemoteIp(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP).(string)
	return
}
func getSettingVpnOpenvpnKeyLocalIp(data connectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP).(string)
	return
}

// Setter
func setSettingVpnOpenvpnKeyRemote(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE, value)
}
func setSettingVpnOpenvpnKeyConnectionType(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE, value)
}
func setSettingVpnOpenvpnKeyUsername(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME, value)
}
func setSettingVpnOpenvpnKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS, value)
}
func setSettingVpnOpenvpnKeyPassword(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD, value)
}
func setSettingVpnOpenvpnKeyCert(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT, value)
}
func setSettingVpnOpenvpnKeyCa(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA, value)
}
func setSettingVpnOpenvpnKeyKey(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY, value)
}
func setSettingVpnOpenvpnKeyCertpass(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS, value)
}
func setSettingVpnOpenvpnKeyCertpassFlags(data connectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS, value)
}
func setSettingVpnOpenvpnKeyStaticKey(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY, value)
}
func setSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION, value)
}
func setSettingVpnOpenvpnKeyRemoteIp(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP, value)
}
func setSettingVpnOpenvpnKeyLocalIp(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP, value)
}

// JSON Getter
func getSettingVpnOpenvpnKeyRemoteJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_REMOTE))
	return
}
func getSettingVpnOpenvpnKeyConnectionTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE))
	return
}
func getSettingVpnOpenvpnKeyUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_USERNAME))
	return
}
func getSettingVpnOpenvpnKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS))
	return
}
func getSettingVpnOpenvpnKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_PASSWORD))
	return
}
func getSettingVpnOpenvpnKeyCertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CERT))
	return
}
func getSettingVpnOpenvpnKeyCaJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CA))
	return
}
func getSettingVpnOpenvpnKeyKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_KEY))
	return
}
func getSettingVpnOpenvpnKeyCertpassJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CERTPASS))
	return
}
func getSettingVpnOpenvpnKeyCertpassFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS))
	return
}
func getSettingVpnOpenvpnKeyStaticKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY))
	return
}
func getSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION))
	return
}
func getSettingVpnOpenvpnKeyRemoteIpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP))
	return
}
func getSettingVpnOpenvpnKeyLocalIpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP))
	return
}

// JSON Setter
func setSettingVpnOpenvpnKeyRemoteJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_REMOTE))
}
func setSettingVpnOpenvpnKeyConnectionTypeJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE))
}
func setSettingVpnOpenvpnKeyUsernameJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_USERNAME))
}
func setSettingVpnOpenvpnKeyPasswordFlagsJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS))
}
func setSettingVpnOpenvpnKeyPasswordJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_PASSWORD))
}
func setSettingVpnOpenvpnKeyCertJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CERT))
}
func setSettingVpnOpenvpnKeyCaJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CA))
}
func setSettingVpnOpenvpnKeyKeyJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_KEY))
}
func setSettingVpnOpenvpnKeyCertpassJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CERTPASS))
}
func setSettingVpnOpenvpnKeyCertpassFlagsJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS))
}
func setSettingVpnOpenvpnKeyStaticKeyJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY))
}
func setSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION))
}
func setSettingVpnOpenvpnKeyRemoteIpJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP))
}
func setSettingVpnOpenvpnKeyLocalIpJSON(data connectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP, valueJSON, getSettingVpnOpenvpnKeyType(NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP))
}

// Logic JSON Setter

// Remover
func removeSettingVpnOpenvpnKeyRemote(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE)
}
func removeSettingVpnOpenvpnKeyConnectionType(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CONNECTION_TYPE)
}
func removeSettingVpnOpenvpnKeyUsername(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_USERNAME)
}
func removeSettingVpnOpenvpnKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD_FLAGS)
}
func removeSettingVpnOpenvpnKeyPassword(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_PASSWORD)
}
func removeSettingVpnOpenvpnKeyCert(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERT)
}
func removeSettingVpnOpenvpnKeyCa(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CA)
}
func removeSettingVpnOpenvpnKeyKey(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_KEY)
}
func removeSettingVpnOpenvpnKeyCertpass(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS)
}
func removeSettingVpnOpenvpnKeyCertpassFlags(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_CERTPASS_FLAGS)
}
func removeSettingVpnOpenvpnKeyStaticKey(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY)
}
func removeSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION)
}
func removeSettingVpnOpenvpnKeyRemoteIp(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_REMOTE_IP)
}
func removeSettingVpnOpenvpnKeyLocalIp(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_OPENVPN_SETTING_NAME, NM_SETTING_VPN_OPENVPN_KEY_LOCAL_IP)
}
