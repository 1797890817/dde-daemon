package main

// file header
const fileHeader = `// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)
`

// get key type
const tplGetKeyType = `
// Get key type
func get{{.FieldName | ToFieldFuncBaseName}}KeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown{{range .Keys}}
	case {{.Name}}:
		t = {{.Type}}{{end}}
	}
	return
}
`

// check is key in current field
const tplIsKeyInSettingField = `
// Check is key in current setting field
func isKeyIn{{.FieldName | ToFieldFuncBaseName}}(key string) bool {
	switch key { {{range .Keys}}{{if .BackEndUsed}}
	case {{.Name}}:
		return true{{end}}{{end}}
	}
	return false
}
`

// Ensure field and key exists and not empty
const tplEnsureNoEmpty = `{{$fieldFuncBaseName := .FieldName | ToFieldFuncBaseName}}
// Ensure field and key exists and not empty
func ensureField{{$fieldFuncBaseName}}Exists(data _ConnectionData, errs map[string]string, relatedKey string) {
	if !isSettingFieldExists(data, {{.FieldName}}) {
		rememberError(errs, relatedKey, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, {{.FieldName}}))
	}
	fieldData, _ := data[{{.FieldName}}]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, {{.FieldName}}))
	}
}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}{{$keyFuncBaseName := $key.Name | ToKeyFuncBaseName}}
func ensure{{$keyFuncBaseName}}NoEmpty(data _ConnectionData, errs map[string]string) {
	if !is{{$keyFuncBaseName}}Exists(data) {
		rememberError(errs, {{$key.Name}}, NM_KEY_ERROR_MISSING_VALUE)
	}{{if IfNeedCheckValueLength $key.Type}}
	value := get{{$keyFuncBaseName}}(data)
	if len(value) == 0 {
		rememberError(errs, {{$key.Name}}, NM_KEY_ERROR_EMPTY_VALUE)
	}{{end}}
}{{end}}{{end}}
`

// get key's default json value
const tplGetDefaultValueJSON = `{{$fieldFuncBaseName := .FieldName | ToFieldFuncBaseName}}
// Get key's default value
func get{{$fieldFuncBaseName}}KeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		Logger.Error("invalid key:", key){{range .Keys}}{{if .BackEndUsed}}{{$default := ToKeyTypeDefaultValueJSON .Type .Default}}
	case {{.Name}}:
		valueJSON = ` + "`{{$default}}`" + `{{end}}{{end}}
	}
	return
}
`

// get json value generally
const tplGeneralGetterJSON = `{{$fieldFuncBaseName := .FieldName | ToFieldFuncBaseName}}
// Get JSON value generally
func generalGet{{$fieldFuncBaseName}}KeyJSON(data _ConnectionData, key string) (value string) {
	switch key {
	default:
		Logger.Error("generalGet{{$fieldFuncBaseName}}KeyJSON: invalide key", key){{range .Keys}}{{if .BackEndUsed}}
	case {{.Name}}:
		value = get{{.Name | ToKeyFuncBaseName}}JSON(data){{end}}{{end}}
	}
	return
}
`

// set json value generally
const tplGeneralSetterJSON = `{{$fieldFuncBaseName := .FieldName | ToFieldFuncBaseName}}
// Set JSON value generally
func generalSet{{$fieldFuncBaseName}}KeyJSON(data _ConnectionData, key, valueJSON string) {
	switch key {
	default:
		Logger.Error("generalSet{{$fieldFuncBaseName}}KeyJSON: invalide key", key){{range .Keys}}{{if .BackEndUsed}}
	case {{.Name}}:
		{{if .LogicSet}}logicSet{{else}}set{{end}}{{.Name | ToKeyFuncBaseName}}JSON(data, valueJSON){{end}}{{end}}
	}
	return
}
`

// check if key exists
const tplCheckExists = `
// Check if key exists{{$fieldName := .FieldName}}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}
func is{{$key.Name | ToKeyFuncBaseName}}Exists(data _ConnectionData) bool {
	return isSettingKeyExists(data, {{$fieldName}}, {{$key.Name}})
}{{end}}{{end}}
`

// getter
const tplGetter = `
// Getter{{$fieldName := .FieldName}}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}
func get{{$key.Name | ToKeyFuncBaseName}}(data _ConnectionData) (value {{$key.Type | ToKeyTypeRealData}}) {
	value, _ = getSettingKey(data, {{$fieldName}}, {{$key.Name}}).({{$key.Type | ToKeyTypeRealData}})
	return
}{{end}}{{end}}
`

// setter
const tplSetter = `
// Setter{{$fieldName := .FieldName}}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}
func set{{$key.Name | ToKeyFuncBaseName}}(data _ConnectionData, value {{$key.Type | ToKeyTypeRealData}}) {
	setSettingKey(data, {{$fieldName}}, {{$key.Name}}, value)
}{{end}}{{end}}
`

// json getter
const tplJSONGetter = `
// JSON Getter{{$fieldName := .FieldName}}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}
func get{{$key.Name | ToKeyFuncBaseName}}JSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, {{$fieldName}}, {{$key.Name}}, get{{$fieldName | ToFieldFuncBaseName}}KeyType({{$key.Name}}))
	return
}{{end}}{{end}}
`

// json setter
const tplJSONSetter = `
// JSON Setter{{$fieldName := .FieldName}}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}
func set{{$key.Name | ToKeyFuncBaseName}}JSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, {{$fieldName}}, {{$key.Name}}, valueJSON, get{{$fieldName | ToFieldFuncBaseName}}KeyType({{$key.Name}}))
}{{end}}{{end}}
`

// remover
const tplRemover = `
// Remover{{$fieldName := .FieldName}}{{range $index, $key := .Keys}}{{if $key.BackEndUsed}}
func remove{{$key.Name | ToKeyFuncBaseName}}(data _ConnectionData) {
	removeSettingKey(data, {{$fieldName}}, {{$key.Name}})
}{{end}}{{end}}
`

// TODO
const tplGetAvaiableValues = `// Get avaiable values`

// general setting utils
const tplGeneralSettingUtils = `// This file is automatically generated, please don't edit manully.
package main

func generalIsKeyInSettingField(field, key string) bool {
	if isVirtualKey(field, key) {
		return true
	}
	switch field {
	default:
		Logger.Warning("invalid field name", field){{range .}}
	case {{.FieldName}}:
		return isKeyIn{{.FieldName | ToFieldFuncBaseName}}(key){{end}}
	}
	return false
}

func generalGetSettingKeyType(field, key string) (t ktype) {
	if isVirtualKey(field, key) {
		t = getSettingVkKeyType(field, key)
		return
	}
	switch field {
	default:
		Logger.Warning("invalid field name", field){{range .}}
	case {{.FieldName}}:
		t = get{{.FieldName | ToFieldFuncBaseName}}KeyType(key){{end}}
	}
	return
}

func generalGetSettingAvailableKeys(data _ConnectionData, field string) (keys []string) {
	switch field { {{range .}}
	case {{.FieldName}}:
		keys = get{{.FieldName | ToFieldFuncBaseName}}AvailableKeys(data){{end}}
	}
	return
}

func generalGetSettingAvailableValues(data _ConnectionData, field, key string) (values []string, customizable bool) {
	if isVirtualKey(field, key) {
		values = generalGetSettingVkAvailableValues(field, key)
		return
	}
	switch field { {{range .}}
	case {{.FieldName}}:
		values, customizable = get{{.FieldName | ToFieldFuncBaseName}}AvailableValues(data, key){{end}}
	}
	return
}

func generalCheckSettingValues(data _ConnectionData, field string) (errs map[string]string) {
	switch field {
	default:
		Logger.Error("invalid field name", field){{range .}}
	case {{.FieldName}}:
		errs = check{{.FieldName | ToFieldFuncBaseName}}Values(data){{end}}
	}
	return
}

func generalGetSettingKeyJSON(data _ConnectionData, field, key string) (valueJSON string) {
	if isVirtualKey(field, key) {
		valueJSON = generalGetVirtualKeyJSON(data, field, key)
		return
	}
	switch field {
	default:
		Logger.Warning("invalid field name", field){{range.}}
	case {{.FieldName}}:
		valueJSON = generalGet{{.FieldName | ToFieldFuncBaseName}}KeyJSON(data, key){{end}}
	}
	return
}

func generalSetSettingKeyJSON(data _ConnectionData, field, key, valueJSON string) {
	if isVirtualKey(field, key) {
		generalSetVirtualKeyJSON(data, field, key, valueJSON)
		return
	}
	switch field {
	default:
		Logger.Warning("invalid field name", field){{range .}}
	case {{.FieldName}}:
		generalSet{{.FieldName | ToFieldFuncBaseName}}KeyJSON(data, key, valueJSON){{end}}
	}
}

func getSettingKeyDefaultValueJSON(field, key string) (valueJSON string) {
	switch field {
	default:
		Logger.Warning("invalid field name", field){{range .}}
	case {{.FieldName}}:
		valueJSON = get{{.FieldName | ToFieldFuncBaseName}}KeyDefaultValueJSON(key){{end}}
	}
	return
}`
