// This file is automatically generated, please don't edit manually.
package network

// Virtual key names
const (
	NM_SETTING_VK_802_1X_ENABLE                               = "vk-enable-8021x"
	NM_SETTING_VK_802_1X_EAP                                  = "vk-eap"
	NM_SETTING_VK_802_1X_PAC_FILE                             = "vk-pac-file"
	NM_SETTING_VK_802_1X_CA_CERT                              = "vk-ca-cert"
	NM_SETTING_VK_802_1X_CLIENT_CERT                          = "vk-client-cert"
	NM_SETTING_VK_802_1X_PRIVATE_KEY                          = "vk-private-key"
	NM_SETTING_VK_CONNECTION_NO_PERMISSION                    = "vk-no-permission"
	NM_SETTING_VK_MOBILE_COUNTRY                              = "vk-mobile-country"
	NM_SETTING_VK_MOBILE_PROVIDER                             = "vk-mobile-provider"
	NM_SETTING_VK_MOBILE_PLAN                                 = "vk-mobile-plan"
	NM_SETTING_VK_MOBILE_SERVICE_TYPE                         = "vk-mobile-service-type"
	NM_SETTING_VK_MOBILE_APN_READONLY                         = "vk-gsm-apn-readonly"
	NM_SETTING_VK_IP4_CONFIG_ADDRESSES_ADDRESS                = "vk-addresses-address"
	NM_SETTING_VK_IP4_CONFIG_ADDRESSES_MASK                   = "vk-addresses-mask"
	NM_SETTING_VK_IP4_CONFIG_ADDRESSES_GATEWAY                = "vk-addresses-gateway"
	NM_SETTING_VK_IP4_CONFIG_DNS                              = "vk-dns"
	NM_SETTING_VK_IP4_CONFIG_ROUTES_ADDRESS                   = "vk-routes-address"
	NM_SETTING_VK_IP4_CONFIG_ROUTES_MASK                      = "vk-routes-mask"
	NM_SETTING_VK_IP4_CONFIG_ROUTES_NEXTHOP                   = "vk-routes-nexthop"
	NM_SETTING_VK_IP4_CONFIG_ROUTES_METRIC                    = "vk-routes-metric"
	NM_SETTING_VK_IP6_CONFIG_ADDRESSES_ADDRESS                = "vk-addresses-address"
	NM_SETTING_VK_IP6_CONFIG_ADDRESSES_PREFIX                 = "vk-addresses-prefix"
	NM_SETTING_VK_IP6_CONFIG_ADDRESSES_GATEWAY                = "vk-addresses-gateway"
	NM_SETTING_VK_IP6_CONFIG_DNS                              = "vk-dns"
	NM_SETTING_VK_IP6_CONFIG_ROUTES_ADDRESS                   = "vk-routes-address"
	NM_SETTING_VK_IP6_CONFIG_ROUTES_PREFIX                    = "vk-routes-prefix"
	NM_SETTING_VK_IP6_CONFIG_ROUTES_NEXTHOP                   = "vk-routes-nexthop"
	NM_SETTING_VK_IP6_CONFIG_ROUTES_METRIC                    = "vk-routes-metric"
	NM_SETTING_VK_PPP_ENABLE_LCP_ECHO                         = "vk-enable-lcp-echo"
	NM_SETTING_VK_VPN_AUTOCONNECT                             = "vk-vpn-autoconnect"
	NM_SETTING_VK_VPN_TYPE                                    = "vk-vpn-type"
	NM_SETTING_VK_VPN_MISSING_PLUGIN                          = "vk-vpn-missing-plugin"
	NM_SETTING_VK_VPN_L2TP_REQUIRE_MPPE                       = "vk-require-mppe"
	NM_SETTING_VK_VPN_L2TP_MPPE_SECURITY                      = "vk-mppe-security"
	NM_SETTING_VK_VPN_L2TP_ENABLE_LCP_ECHO                    = "vk-enable-lcp-echo"
	NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_PORT                 = "vk-enable-port"
	NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_RENEG_SECONDS        = "vk-enable-reneg-seconds"
	NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TUNNEL_MTU           = "vk-enable-tunnel-mtu"
	NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_FRAGMENT_SIZE        = "vk-enable-fragment-size"
	NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_STATIC_KEY_DIRECTION = "vk-static-key-direction"
	NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TA_DIR               = "vk-ta-dir"
	NM_SETTING_VK_VPN_PPTP_REQUIRE_MPPE                       = "vk-require-mppe"
	NM_SETTING_VK_VPN_PPTP_MPPE_SECURITY                      = "vk-mppe-security"
	NM_SETTING_VK_VPN_PPTP_ENABLE_LCP_ECHO                    = "vk-enable-lcp-echo"
	NM_SETTING_VK_VPN_VPNC_KEY_HYBRID_AUTHMODE                = "vk-hybrid-authmode"
	NM_SETTING_VK_VPN_VPNC_KEY_ENCRYPTION_METHOD              = "vk-encryption-method"
	NM_SETTING_VK_VPN_VPNC_KEY_DISABLE_DPD                    = "vk-disable-dpd"
	NM_SETTING_VK_WIRED_ENABLE_MTU                            = "vk-enable-mtu"
	NM_SETTING_VK_WIRELESS_ENABLE_MTU                         = "vk-enable-mtu"
	NM_SETTING_VK_WIRELESS_SECURITY_KEY_MGMT                  = "vk-key-mgmt"
)

// Virtual key data
var virtualKeys = []vkeyInfo{
	{Value: NM_SETTING_VK_802_1X_ENABLE, Type: ktypeBoolean, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_SECURITY, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_802_1X_EAP, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_802_1X_SETTING_NAME, RelatedKeys: []string{NM_SETTING_802_1X_EAP}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_802_1X_PAC_FILE, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_802_1X_SETTING_NAME, RelatedKeys: []string{NM_SETTING_802_1X_PAC_FILE}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_802_1X_CA_CERT, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_802_1X_SETTING_NAME, RelatedKeys: []string{NM_SETTING_802_1X_CA_CERT}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_802_1X_CLIENT_CERT, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_802_1X_SETTING_NAME, RelatedKeys: []string{NM_SETTING_802_1X_CLIENT_CERT}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_802_1X_PRIVATE_KEY, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_802_1X_SETTING_NAME, RelatedKeys: []string{NM_SETTING_802_1X_PRIVATE_KEY}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_CONNECTION_NO_PERMISSION, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_CONNECTION_SETTING_NAME, RelatedKeys: []string{NM_SETTING_CONNECTION_PERMISSIONS}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_MOBILE_COUNTRY, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_MOBILE, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_MOBILE_PROVIDER, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_MOBILE, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_MOBILE_PLAN, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_MOBILE, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_MOBILE_SERVICE_TYPE, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_MOBILE, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_MOBILE_APN_READONLY, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_MOBILE, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ADDRESSES_ADDRESS, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ADDRESSES}, Available: true, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ADDRESSES_MASK, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ADDRESSES}, Available: true, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ADDRESSES_GATEWAY, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ADDRESSES}, Available: true, ChildKey: true, Optional: true},
	{Value: NM_SETTING_VK_IP4_CONFIG_DNS, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_DNS}, Available: true, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ROUTES_ADDRESS, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ROUTES_MASK, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ROUTES_NEXTHOP, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP4_CONFIG_ROUTES_METRIC, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP4_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ADDRESSES_ADDRESS, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ADDRESSES}, Available: true, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ADDRESSES_PREFIX, Type: ktypeUint32, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ADDRESSES}, Available: true, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ADDRESSES_GATEWAY, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ADDRESSES}, Available: true, ChildKey: true, Optional: true},
	{Value: NM_SETTING_VK_IP6_CONFIG_DNS, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_DNS}, Available: true, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ROUTES_ADDRESS, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ROUTES_PREFIX, Type: ktypeUint32, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ROUTES_NEXTHOP, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_IP6_CONFIG_ROUTES_METRIC, Type: ktypeUint32, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_IP6_CONFIG_SETTING_NAME, RelatedKeys: []string{NM_SETTING_IP_CONFIG_ROUTES}, Available: false, ChildKey: true, Optional: false},
	{Value: NM_SETTING_VK_PPP_ENABLE_LCP_ECHO, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_PPP_LCP_ECHO_FAILURE, NM_SETTING_PPP_LCP_ECHO_INTERVAL}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_AUTOCONNECT, Type: ktypeBoolean, VkType: vkTypeController, RelatedSection: NM_SETTING_CONNECTION_SETTING_NAME, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_TYPE, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_VPN, RelatedKeys: []string{}, Available: false, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_MISSING_PLUGIN, Type: ktypeString, VkType: vkTypeController, RelatedSection: NM_SETTING_VS_VPN, RelatedKeys: []string{}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_L2TP_REQUIRE_MPPE, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_L2TP_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_L2TP_KEY_REQUIRE_MPPE}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_L2TP_MPPE_SECURITY, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_L2TP_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_L2TP_KEY_REQUIRE_MPPE_40, NM_SETTING_VPN_L2TP_KEY_REQUIRE_MPPE_128}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_L2TP_ENABLE_LCP_ECHO, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_L2TP_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_L2TP_KEY_LCP_ECHO_FAILURE, NM_SETTING_VPN_L2TP_KEY_LCP_ECHO_INTERVAL}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_PORT, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_OPENVPN_KEY_PORT}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_RENEG_SECONDS, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_OPENVPN_KEY_RENEG_SECONDS}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TUNNEL_MTU, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_OPENVPN_KEY_TUNNEL_MTU}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_FRAGMENT_SIZE, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_OPENVPN_KEY_FRAGMENT_SIZE}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_STATIC_KEY_DIRECTION, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_OPENVPN_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TA_DIR, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_OPENVPN_TLSAUTH_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_OPENVPN_KEY_TA_DIR}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_PPTP_REQUIRE_MPPE, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_PPTP_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_PPTP_MPPE_SECURITY, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_PPTP_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_PPTP_ENABLE_LCP_ECHO, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_PPTP_PPP_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_VPNC_KEY_HYBRID_AUTHMODE, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_VPNC_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_VPNC_KEY_AUTHMODE}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_VPNC_KEY_ENCRYPTION_METHOD, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_VPNC_ADVANCED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_VPNC_KEY_SINGLE_DES, NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_VPN_VPNC_KEY_DISABLE_DPD, Type: ktypeBoolean, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_ALIAS_VPN_VPNC_ADVANCED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_WIRED_ENABLE_MTU, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_WIRED_SETTING_NAME, RelatedKeys: []string{NM_SETTING_WIRED_MTU}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_WIRELESS_ENABLE_MTU, Type: ktypeBoolean, VkType: vkTypeEnableWrapper, RelatedSection: NM_SETTING_WIRELESS_SETTING_NAME, RelatedKeys: []string{NM_SETTING_WIRELESS_MTU}, Available: true, ChildKey: false, Optional: false},
	{Value: NM_SETTING_VK_WIRELESS_SECURITY_KEY_MGMT, Type: ktypeString, VkType: vkTypeWrapper, RelatedSection: NM_SETTING_WIRELESS_SECURITY_SETTING_NAME, RelatedKeys: []string{NM_SETTING_WIRELESS_SECURITY_KEY_MGMT}, Available: true, ChildKey: false, Optional: false},
}

// Get JSON value generally
func generalGetVkeyJSON(data connectionData, section, key string) (valueJSON string) {
	switch section {
	case NM_SETTING_VS_SECURITY:
		switch key {
		case NM_SETTING_VK_802_1X_ENABLE:
			return getSettingVk8021xEnableJSON(data)
		}
	case NM_SETTING_802_1X_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_802_1X_EAP:
			return getSettingVk8021xEapJSON(data)
		case NM_SETTING_VK_802_1X_PAC_FILE:
			return getSettingVk8021xPacFileJSON(data)
		case NM_SETTING_VK_802_1X_CA_CERT:
			return getSettingVk8021xCaCertJSON(data)
		case NM_SETTING_VK_802_1X_CLIENT_CERT:
			return getSettingVk8021xClientCertJSON(data)
		case NM_SETTING_VK_802_1X_PRIVATE_KEY:
			return getSettingVk8021xPrivateKeyJSON(data)
		}
	case NM_SETTING_CONNECTION_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_CONNECTION_NO_PERMISSION:
			return getSettingVkConnectionNoPermissionJSON(data)
		case NM_SETTING_VK_VPN_AUTOCONNECT:
			return getSettingVkVpnAutoconnectJSON(data)
		}
	case NM_SETTING_VS_MOBILE:
		switch key {
		case NM_SETTING_VK_MOBILE_COUNTRY:
			return getSettingVkMobileCountryJSON(data)
		case NM_SETTING_VK_MOBILE_PROVIDER:
			return getSettingVkMobileProviderJSON(data)
		case NM_SETTING_VK_MOBILE_PLAN:
			return getSettingVkMobilePlanJSON(data)
		case NM_SETTING_VK_MOBILE_SERVICE_TYPE:
			return getSettingVkMobileServiceTypeJSON(data)
		case NM_SETTING_VK_MOBILE_APN_READONLY:
			return getSettingVkMobileApnReadonlyJSON(data)
		}
	case NM_SETTING_IP4_CONFIG_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_IP4_CONFIG_ADDRESSES_ADDRESS:
			return getSettingVkIp4ConfigAddressesAddressJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_ADDRESSES_MASK:
			return getSettingVkIp4ConfigAddressesMaskJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_ADDRESSES_GATEWAY:
			return getSettingVkIp4ConfigAddressesGatewayJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_DNS:
			return getSettingVkIp4ConfigDnsJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_ADDRESS:
			return getSettingVkIp4ConfigRoutesAddressJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_MASK:
			return getSettingVkIp4ConfigRoutesMaskJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_NEXTHOP:
			return getSettingVkIp4ConfigRoutesNexthopJSON(data)
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_METRIC:
			return getSettingVkIp4ConfigRoutesMetricJSON(data)
		}
	case NM_SETTING_IP6_CONFIG_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_IP6_CONFIG_ADDRESSES_ADDRESS:
			return getSettingVkIp6ConfigAddressesAddressJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_ADDRESSES_PREFIX:
			return getSettingVkIp6ConfigAddressesPrefixJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_ADDRESSES_GATEWAY:
			return getSettingVkIp6ConfigAddressesGatewayJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_DNS:
			return getSettingVkIp6ConfigDnsJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_ADDRESS:
			return getSettingVkIp6ConfigRoutesAddressJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_PREFIX:
			return getSettingVkIp6ConfigRoutesPrefixJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_NEXTHOP:
			return getSettingVkIp6ConfigRoutesNexthopJSON(data)
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_METRIC:
			return getSettingVkIp6ConfigRoutesMetricJSON(data)
		}
	case NM_SETTING_PPP_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_PPP_ENABLE_LCP_ECHO:
			return getSettingVkPppEnableLcpEchoJSON(data)
		}
	case NM_SETTING_VS_VPN:
		switch key {
		case NM_SETTING_VK_VPN_TYPE:
			return getSettingVkVpnTypeJSON(data)
		case NM_SETTING_VK_VPN_MISSING_PLUGIN:
			return getSettingVkVpnMissingPluginJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_L2TP_PPP_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_L2TP_REQUIRE_MPPE:
			return getSettingVkVpnL2tpRequireMppeJSON(data)
		case NM_SETTING_VK_VPN_L2TP_MPPE_SECURITY:
			return getSettingVkVpnL2tpMppeSecurityJSON(data)
		case NM_SETTING_VK_VPN_L2TP_ENABLE_LCP_ECHO:
			return getSettingVkVpnL2tpEnableLcpEchoJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_PORT:
			return getSettingVkVpnOpenvpnKeyEnablePortJSON(data)
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_RENEG_SECONDS:
			return getSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data)
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TUNNEL_MTU:
			return getSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data)
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_FRAGMENT_SIZE:
			return getSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_OPENVPN_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_STATIC_KEY_DIRECTION:
			return getSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_OPENVPN_TLSAUTH_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TA_DIR:
			return getSettingVkVpnOpenvpnKeyEnableTaDirJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_PPTP_PPP_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_PPTP_REQUIRE_MPPE:
			return getSettingVkVpnPptpRequireMppeJSON(data)
		case NM_SETTING_VK_VPN_PPTP_MPPE_SECURITY:
			return getSettingVkVpnPptpMppeSecurityJSON(data)
		case NM_SETTING_VK_VPN_PPTP_ENABLE_LCP_ECHO:
			return getSettingVkVpnPptpEnableLcpEchoJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_VPNC_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_VPNC_KEY_HYBRID_AUTHMODE:
			return getSettingVkVpnVpncKeyHybridAuthmodeJSON(data)
		}
	case NM_SETTING_ALIAS_VPN_VPNC_ADVANCED_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_VPNC_KEY_ENCRYPTION_METHOD:
			return getSettingVkVpnVpncKeyEncryptionMethodJSON(data)
		case NM_SETTING_VK_VPN_VPNC_KEY_DISABLE_DPD:
			return getSettingVkVpnVpncKeyDisableDpdJSON(data)
		}
	case NM_SETTING_WIRED_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_WIRED_ENABLE_MTU:
			return getSettingVkWiredEnableMtuJSON(data)
		}
	case NM_SETTING_WIRELESS_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_WIRELESS_ENABLE_MTU:
			return getSettingVkWirelessEnableMtuJSON(data)
		}
	case NM_SETTING_WIRELESS_SECURITY_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_WIRELESS_SECURITY_KEY_MGMT:
			return getSettingVkWirelessSecurityKeyMgmtJSON(data)
		}
	}
	logger.Error("invalid virtual key:", section, key)
	return
}

// Set JSON value generally
func generalSetVkeyJSON(data connectionData, section, key string, valueJSON string) (err error) {
	if isJSONValueMeansToDeleteKey(valueJSON, getSettingVkeyType(section, key)) && !isChildVkey(section, key) {
		logger.Debugf("json value means to remove key, data[%s][%s]=%#v", section, key, valueJSON)
		removeVirtualKey(data, section, key)
		return
	}
	// each virtual key own a logic setter
	switch section {
	case NM_SETTING_VS_SECURITY:
		switch key {
		case NM_SETTING_VK_802_1X_ENABLE:
			err = logicSetSettingVk8021xEnableJSON(data, valueJSON)
			return
		}
	case NM_SETTING_802_1X_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_802_1X_EAP:
			err = logicSetSettingVk8021xEapJSON(data, valueJSON)
			return
		case NM_SETTING_VK_802_1X_PAC_FILE:
			err = logicSetSettingVk8021xPacFileJSON(data, valueJSON)
			return
		case NM_SETTING_VK_802_1X_CA_CERT:
			err = logicSetSettingVk8021xCaCertJSON(data, valueJSON)
			return
		case NM_SETTING_VK_802_1X_CLIENT_CERT:
			err = logicSetSettingVk8021xClientCertJSON(data, valueJSON)
			return
		case NM_SETTING_VK_802_1X_PRIVATE_KEY:
			err = logicSetSettingVk8021xPrivateKeyJSON(data, valueJSON)
			return
		}
	case NM_SETTING_CONNECTION_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_CONNECTION_NO_PERMISSION:
			err = logicSetSettingVkConnectionNoPermissionJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_AUTOCONNECT:
			err = logicSetSettingVkVpnAutoconnectJSON(data, valueJSON)
			return
		}
	case NM_SETTING_VS_MOBILE:
		switch key {
		case NM_SETTING_VK_MOBILE_COUNTRY:
			err = logicSetSettingVkMobileCountryJSON(data, valueJSON)
			return
		case NM_SETTING_VK_MOBILE_PROVIDER:
			err = logicSetSettingVkMobileProviderJSON(data, valueJSON)
			return
		case NM_SETTING_VK_MOBILE_PLAN:
			err = logicSetSettingVkMobilePlanJSON(data, valueJSON)
			return
		case NM_SETTING_VK_MOBILE_SERVICE_TYPE:
			err = logicSetSettingVkMobileServiceTypeJSON(data, valueJSON)
			return
		case NM_SETTING_VK_MOBILE_APN_READONLY:
			err = logicSetSettingVkMobileApnReadonlyJSON(data, valueJSON)
			return
		}
	case NM_SETTING_IP4_CONFIG_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_IP4_CONFIG_ADDRESSES_ADDRESS:
			err = logicSetSettingVkIp4ConfigAddressesAddressJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_ADDRESSES_MASK:
			err = logicSetSettingVkIp4ConfigAddressesMaskJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_ADDRESSES_GATEWAY:
			err = logicSetSettingVkIp4ConfigAddressesGatewayJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_DNS:
			err = logicSetSettingVkIp4ConfigDnsJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_ADDRESS:
			err = logicSetSettingVkIp4ConfigRoutesAddressJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_MASK:
			err = logicSetSettingVkIp4ConfigRoutesMaskJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_NEXTHOP:
			err = logicSetSettingVkIp4ConfigRoutesNexthopJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP4_CONFIG_ROUTES_METRIC:
			err = logicSetSettingVkIp4ConfigRoutesMetricJSON(data, valueJSON)
			return
		}
	case NM_SETTING_IP6_CONFIG_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_IP6_CONFIG_ADDRESSES_ADDRESS:
			err = logicSetSettingVkIp6ConfigAddressesAddressJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_ADDRESSES_PREFIX:
			err = logicSetSettingVkIp6ConfigAddressesPrefixJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_ADDRESSES_GATEWAY:
			err = logicSetSettingVkIp6ConfigAddressesGatewayJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_DNS:
			err = logicSetSettingVkIp6ConfigDnsJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_ADDRESS:
			err = logicSetSettingVkIp6ConfigRoutesAddressJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_PREFIX:
			err = logicSetSettingVkIp6ConfigRoutesPrefixJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_NEXTHOP:
			err = logicSetSettingVkIp6ConfigRoutesNexthopJSON(data, valueJSON)
			return
		case NM_SETTING_VK_IP6_CONFIG_ROUTES_METRIC:
			err = logicSetSettingVkIp6ConfigRoutesMetricJSON(data, valueJSON)
			return
		}
	case NM_SETTING_PPP_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_PPP_ENABLE_LCP_ECHO:
			err = logicSetSettingVkPppEnableLcpEchoJSON(data, valueJSON)
			return
		}
	case NM_SETTING_VS_VPN:
		switch key {
		case NM_SETTING_VK_VPN_TYPE:
			err = logicSetSettingVkVpnTypeJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_MISSING_PLUGIN:
			err = logicSetSettingVkVpnMissingPluginJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_L2TP_PPP_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_L2TP_REQUIRE_MPPE:
			err = logicSetSettingVkVpnL2tpRequireMppeJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_L2TP_MPPE_SECURITY:
			err = logicSetSettingVkVpnL2tpMppeSecurityJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_L2TP_ENABLE_LCP_ECHO:
			err = logicSetSettingVkVpnL2tpEnableLcpEchoJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_PORT:
			err = logicSetSettingVkVpnOpenvpnKeyEnablePortJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_RENEG_SECONDS:
			err = logicSetSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TUNNEL_MTU:
			err = logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_FRAGMENT_SIZE:
			err = logicSetSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_OPENVPN_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_STATIC_KEY_DIRECTION:
			err = logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_OPENVPN_TLSAUTH_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_OPENVPN_KEY_ENABLE_TA_DIR:
			err = logicSetSettingVkVpnOpenvpnKeyEnableTaDirJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_PPTP_PPP_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_PPTP_REQUIRE_MPPE:
			err = logicSetSettingVkVpnPptpRequireMppeJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_PPTP_MPPE_SECURITY:
			err = logicSetSettingVkVpnPptpMppeSecurityJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_PPTP_ENABLE_LCP_ECHO:
			err = logicSetSettingVkVpnPptpEnableLcpEchoJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_VPNC_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_VPNC_KEY_HYBRID_AUTHMODE:
			err = logicSetSettingVkVpnVpncKeyHybridAuthmodeJSON(data, valueJSON)
			return
		}
	case NM_SETTING_ALIAS_VPN_VPNC_ADVANCED_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_VPN_VPNC_KEY_ENCRYPTION_METHOD:
			err = logicSetSettingVkVpnVpncKeyEncryptionMethodJSON(data, valueJSON)
			return
		case NM_SETTING_VK_VPN_VPNC_KEY_DISABLE_DPD:
			err = logicSetSettingVkVpnVpncKeyDisableDpdJSON(data, valueJSON)
			return
		}
	case NM_SETTING_WIRED_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_WIRED_ENABLE_MTU:
			err = logicSetSettingVkWiredEnableMtuJSON(data, valueJSON)
			return
		}
	case NM_SETTING_WIRELESS_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_WIRELESS_ENABLE_MTU:
			err = logicSetSettingVkWirelessEnableMtuJSON(data, valueJSON)
			return
		}
	case NM_SETTING_WIRELESS_SECURITY_SETTING_NAME:
		switch key {
		case NM_SETTING_VK_WIRELESS_SECURITY_KEY_MGMT:
			err = logicSetSettingVkWirelessSecurityKeyMgmtJSON(data, valueJSON)
			return
		}
	}
	logger.Error("invalid virtual key:", section, key)
	return
}

// JSON getter
func getSettingVk8021xEnableJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xEnable(data))
	return
}
func getSettingVk8021xEapJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xEap(data))
	return
}
func getSettingVk8021xPacFileJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xPacFile(data))
	return
}
func getSettingVk8021xCaCertJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xCaCert(data))
	return
}
func getSettingVk8021xClientCertJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xClientCert(data))
	return
}
func getSettingVk8021xPrivateKeyJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xPrivateKey(data))
	return
}
func getSettingVkConnectionNoPermissionJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkConnectionNoPermission(data))
	return
}
func getSettingVkMobileCountryJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileCountry(data))
	return
}
func getSettingVkMobileProviderJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileProvider(data))
	return
}
func getSettingVkMobilePlanJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobilePlan(data))
	return
}
func getSettingVkMobileServiceTypeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileServiceType(data))
	return
}
func getSettingVkMobileApnReadonlyJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileApnReadonly(data))
	return
}
func getSettingVkIp4ConfigAddressesAddressJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigAddressesAddress(data))
	return
}
func getSettingVkIp4ConfigAddressesMaskJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigAddressesMask(data))
	return
}
func getSettingVkIp4ConfigAddressesGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigAddressesGateway(data))
	return
}
func getSettingVkIp4ConfigDnsJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigDns(data))
	return
}
func getSettingVkIp4ConfigRoutesAddressJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigRoutesAddress(data))
	return
}
func getSettingVkIp4ConfigRoutesMaskJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigRoutesMask(data))
	return
}
func getSettingVkIp4ConfigRoutesNexthopJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigRoutesNexthop(data))
	return
}
func getSettingVkIp4ConfigRoutesMetricJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigRoutesMetric(data))
	return
}
func getSettingVkIp6ConfigAddressesAddressJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigAddressesAddress(data))
	return
}
func getSettingVkIp6ConfigAddressesPrefixJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigAddressesPrefix(data))
	return
}
func getSettingVkIp6ConfigAddressesGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigAddressesGateway(data))
	return
}
func getSettingVkIp6ConfigDnsJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigDns(data))
	return
}
func getSettingVkIp6ConfigRoutesAddressJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigRoutesAddress(data))
	return
}
func getSettingVkIp6ConfigRoutesPrefixJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigRoutesPrefix(data))
	return
}
func getSettingVkIp6ConfigRoutesNexthopJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigRoutesNexthop(data))
	return
}
func getSettingVkIp6ConfigRoutesMetricJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigRoutesMetric(data))
	return
}
func getSettingVkPppEnableLcpEchoJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkPppEnableLcpEcho(data))
	return
}
func getSettingVkVpnAutoconnectJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnAutoconnect(data))
	return
}
func getSettingVkVpnTypeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnType(data))
	return
}
func getSettingVkVpnMissingPluginJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnMissingPlugin(data))
	return
}
func getSettingVkVpnL2tpRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnL2tpRequireMppe(data))
	return
}
func getSettingVkVpnL2tpMppeSecurityJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnL2tpMppeSecurity(data))
	return
}
func getSettingVkVpnL2tpEnableLcpEchoJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnL2tpEnableLcpEcho(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnablePortJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnablePort(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableRenegSeconds(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableTunnelMtu(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableFragmentSize(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableTaDirJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableTaDir(data))
	return
}
func getSettingVkVpnPptpRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnPptpRequireMppe(data))
	return
}
func getSettingVkVpnPptpMppeSecurityJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnPptpMppeSecurity(data))
	return
}
func getSettingVkVpnPptpEnableLcpEchoJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnPptpEnableLcpEcho(data))
	return
}
func getSettingVkVpnVpncKeyHybridAuthmodeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnVpncKeyHybridAuthmode(data))
	return
}
func getSettingVkVpnVpncKeyEncryptionMethodJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnVpncKeyEncryptionMethod(data))
	return
}
func getSettingVkVpnVpncKeyDisableDpdJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnVpncKeyDisableDpd(data))
	return
}
func getSettingVkWiredEnableMtuJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkWiredEnableMtu(data))
	return
}
func getSettingVkWirelessEnableMtuJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkWirelessEnableMtu(data))
	return
}
func getSettingVkWirelessSecurityKeyMgmtJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkWirelessSecurityKeyMgmt(data))
	return
}

// Logic JSON setter
func logicSetSettingVk8021xEnableJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVk8021xEnable(data, value)
}
func logicSetSettingVk8021xEapJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xEap(data, value)
}
func logicSetSettingVk8021xPacFileJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xPacFile(data, value)
}
func logicSetSettingVk8021xCaCertJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xCaCert(data, value)
}
func logicSetSettingVk8021xClientCertJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xClientCert(data, value)
}
func logicSetSettingVk8021xPrivateKeyJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xPrivateKey(data, value)
}
func logicSetSettingVkConnectionNoPermissionJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkConnectionNoPermission(data, value)
}
func logicSetSettingVkMobileCountryJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileCountry(data, value)
}
func logicSetSettingVkMobileProviderJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileProvider(data, value)
}
func logicSetSettingVkMobilePlanJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobilePlan(data, value)
}
func logicSetSettingVkMobileServiceTypeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileServiceType(data, value)
}
func logicSetSettingVkMobileApnReadonlyJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileApnReadonly(data, value)
}
func logicSetSettingVkIp4ConfigAddressesAddressJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigAddressesAddress(data, value)
}
func logicSetSettingVkIp4ConfigAddressesMaskJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigAddressesMask(data, value)
}
func logicSetSettingVkIp4ConfigAddressesGatewayJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigAddressesGateway(data, value)
}
func logicSetSettingVkIp4ConfigDnsJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigDns(data, value)
}
func logicSetSettingVkIp4ConfigRoutesAddressJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigRoutesAddress(data, value)
}
func logicSetSettingVkIp4ConfigRoutesMaskJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigRoutesMask(data, value)
}
func logicSetSettingVkIp4ConfigRoutesNexthopJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigRoutesNexthop(data, value)
}
func logicSetSettingVkIp4ConfigRoutesMetricJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigRoutesMetric(data, value)
}
func logicSetSettingVkIp6ConfigAddressesAddressJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigAddressesAddress(data, value)
}
func logicSetSettingVkIp6ConfigAddressesPrefixJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueUint32(valueJSON)
	return logicSetSettingVkIp6ConfigAddressesPrefix(data, value)
}
func logicSetSettingVkIp6ConfigAddressesGatewayJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigAddressesGateway(data, value)
}
func logicSetSettingVkIp6ConfigDnsJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigDns(data, value)
}
func logicSetSettingVkIp6ConfigRoutesAddressJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigRoutesAddress(data, value)
}
func logicSetSettingVkIp6ConfigRoutesPrefixJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueUint32(valueJSON)
	return logicSetSettingVkIp6ConfigRoutesPrefix(data, value)
}
func logicSetSettingVkIp6ConfigRoutesNexthopJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigRoutesNexthop(data, value)
}
func logicSetSettingVkIp6ConfigRoutesMetricJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueUint32(valueJSON)
	return logicSetSettingVkIp6ConfigRoutesMetric(data, value)
}
func logicSetSettingVkPppEnableLcpEchoJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkPppEnableLcpEcho(data, value)
}
func logicSetSettingVkVpnAutoconnectJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnAutoconnect(data, value)
}
func logicSetSettingVkVpnTypeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnType(data, value)
}
func logicSetSettingVkVpnMissingPluginJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnMissingPlugin(data, value)
}
func logicSetSettingVkVpnL2tpRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnL2tpRequireMppe(data, value)
}
func logicSetSettingVkVpnL2tpMppeSecurityJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnL2tpMppeSecurity(data, value)
}
func logicSetSettingVkVpnL2tpEnableLcpEchoJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnL2tpEnableLcpEcho(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnablePortJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnablePort(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableRenegSeconds(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtu(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableFragmentSize(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableTaDirJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableTaDir(data, value)
}
func logicSetSettingVkVpnPptpRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnPptpRequireMppe(data, value)
}
func logicSetSettingVkVpnPptpMppeSecurityJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnPptpMppeSecurity(data, value)
}
func logicSetSettingVkVpnPptpEnableLcpEchoJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnPptpEnableLcpEcho(data, value)
}
func logicSetSettingVkVpnVpncKeyHybridAuthmodeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnVpncKeyHybridAuthmode(data, value)
}
func logicSetSettingVkVpnVpncKeyEncryptionMethodJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnVpncKeyEncryptionMethod(data, value)
}
func logicSetSettingVkVpnVpncKeyDisableDpdJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnVpncKeyDisableDpd(data, value)
}
func logicSetSettingVkWiredEnableMtuJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkWiredEnableMtu(data, value)
}
func logicSetSettingVkWirelessEnableMtuJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkWirelessEnableMtu(data, value)
}
func logicSetSettingVkWirelessSecurityKeyMgmtJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkWirelessSecurityKeyMgmt(data, value)
}

// Getter for key's enable wrapper
func getSettingVkVpnOpenvpnKeyEnablePort(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyPortExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableRenegSeconds(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyRenegSecondsExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableTunnelMtu(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyTunnelMtuExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableFragmentSize(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyFragmentSizeExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableTaDir(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyTaDirExists(data) {
		return false
	}
	return true
}
func getSettingVkWiredEnableMtu(data connectionData) (value bool) {
	if !isSettingWiredMtuExists(data) {
		return false
	}
	return true
}
func getSettingVkWirelessEnableMtu(data connectionData) (value bool) {
	if !isSettingWirelessMtuExists(data) {
		return false
	}
	return true
}

// Setter for key's enable wrapper
func logicSetSettingVkVpnOpenvpnKeyEnablePort(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyPort(data, 1194)
	} else {
		removeSettingVpnOpenvpnKeyPort(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableRenegSeconds(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyRenegSeconds(data, uint32(0))
	} else {
		removeSettingVpnOpenvpnKeyRenegSeconds(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtu(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyTunnelMtu(data, 1500)
	} else {
		removeSettingVpnOpenvpnKeyTunnelMtu(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableFragmentSize(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyFragmentSize(data, 1300)
	} else {
		removeSettingVpnOpenvpnKeyFragmentSize(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyStaticKeyDirection(data, uint32(0))
	} else {
		removeSettingVpnOpenvpnKeyStaticKeyDirection(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableTaDir(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyTaDir(data, uint32(0))
	} else {
		removeSettingVpnOpenvpnKeyTaDir(data)
	}
	return
}
func logicSetSettingVkWiredEnableMtu(data connectionData, value bool) (err error) {
	if value {
		setSettingWiredMtu(data, uint32(0))
	} else {
		removeSettingWiredMtu(data)
	}
	return
}
func logicSetSettingVkWirelessEnableMtu(data connectionData, value bool) (err error) {
	if value {
		setSettingWirelessMtu(data, uint32(0))
	} else {
		removeSettingWirelessMtu(data)
	}
	return
}
