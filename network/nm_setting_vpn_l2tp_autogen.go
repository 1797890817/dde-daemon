// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)

// Get key type
func getSettingVpnL2tpKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		t = ktypeString
	case NM_SETTING_VPN_L2TP_KEY_USER:
		t = ktypeString
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		t = ktypeString
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG:
		t = ktypeUint32
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		t = ktypeString
	}
	return
}

// Check is key in current setting field
func isKeyInSettingVpnL2tp(key string) bool {
	switch key {
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		return true
	case NM_SETTING_VPN_L2TP_KEY_USER:
		return true
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		return true
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG:
		return true
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		return true
	}
	return false
}

// Get key's default value
func getSettingVpnL2tpKeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		Logger.Error("invalid key:", key)
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		valueJSON = `""`
	case NM_SETTING_VPN_L2TP_KEY_USER:
		valueJSON = `""`
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		valueJSON = `""`
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG:
		valueJSON = `0`
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		valueJSON = `""`
	}
	return
}

// Get JSON value generally
func generalGetSettingVpnL2tpKeyJSON(data _ConnectionData, key string) (value string) {
	switch key {
	default:
		Logger.Error("generalGetSettingVpnL2tpKeyJSON: invalide key", key)
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		value = getSettingVpnL2tpKeyGatewayJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_USER:
		value = getSettingVpnL2tpKeyUserJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		value = getSettingVpnL2tpKeyPasswordJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG:
		value = getSettingVpnL2tpKeyPasswordFlagJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		value = getSettingVpnL2tpKeyDomainJSON(data)
	}
	return
}

// Set JSON value generally
func generalSetSettingVpnL2tpKeyJSON(data _ConnectionData, key, valueJSON string) {
	switch key {
	default:
		Logger.Error("generalSetSettingVpnL2tpKeyJSON: invalide key", key)
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		setSettingVpnL2tpKeyGatewayJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_USER:
		setSettingVpnL2tpKeyUserJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		setSettingVpnL2tpKeyPasswordJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG:
		setSettingVpnL2tpKeyPasswordFlagJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		setSettingVpnL2tpKeyDomainJSON(data, valueJSON)
	}
	return
}

// Check if key exists
func isSettingVpnL2tpKeyGatewayExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY)
}
func isSettingVpnL2tpKeyUserExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER)
}
func isSettingVpnL2tpKeyPasswordExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD)
}
func isSettingVpnL2tpKeyPasswordFlagExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG)
}
func isSettingVpnL2tpKeyDomainExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN)
}

// Ensure field and key exists and not empty
func ensureFieldSettingVpnL2tpExists(data _ConnectionData, errs FieldKeyErrors, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME) {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_VF_VPN_L2TP_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_VF_VPN_L2TP_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_VF_VPN_L2TP_SETTING_NAME))
	}
}
func ensureSettingVpnL2tpKeyGatewayNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnL2tpKeyGatewayExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyGateway(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnL2tpKeyUserNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnL2tpKeyUserExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyUser(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnL2tpKeyPasswordNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnL2tpKeyPasswordExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnL2tpKeyPasswordFlagNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnL2tpKeyPasswordFlagExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnL2tpKeyDomainNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnL2tpKeyDomainExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyDomain(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, NM_KEY_ERROR_EMPTY_VALUE)
	}
}

// Getter
func getSettingVpnL2tpKeyGateway(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY).(string)
	return
}
func getSettingVpnL2tpKeyUser(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER).(string)
	return
}
func getSettingVpnL2tpKeyPassword(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD).(string)
	return
}
func getSettingVpnL2tpKeyPasswordFlag(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG).(uint32)
	return
}
func getSettingVpnL2tpKeyDomain(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN).(string)
	return
}

// Setter
func setSettingVpnL2tpKeyGateway(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, value)
}
func setSettingVpnL2tpKeyUser(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, value)
}
func setSettingVpnL2tpKeyPassword(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, value)
}
func setSettingVpnL2tpKeyPasswordFlag(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG, value)
}
func setSettingVpnL2tpKeyDomain(data _ConnectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, value)
}

// JSON Getter
func getSettingVpnL2tpKeyGatewayJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_GATEWAY))
	return
}
func getSettingVpnL2tpKeyUserJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_USER))
	return
}
func getSettingVpnL2tpKeyPasswordJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD))
	return
}
func getSettingVpnL2tpKeyPasswordFlagJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG))
	return
}
func getSettingVpnL2tpKeyDomainJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_DOMAIN))
	return
}

// JSON Setter
func setSettingVpnL2tpKeyGatewayJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_GATEWAY))
}
func setSettingVpnL2tpKeyUserJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_USER))
}
func setSettingVpnL2tpKeyPasswordJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD))
}
func setSettingVpnL2tpKeyPasswordFlagJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG))
}
func setSettingVpnL2tpKeyDomainJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_DOMAIN))
}

// Remover
func removeSettingVpnL2tpKeyGateway(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY)
}
func removeSettingVpnL2tpKeyUser(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER)
}
func removeSettingVpnL2tpKeyPassword(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD)
}
func removeSettingVpnL2tpKeyPasswordFlag(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAG)
}
func removeSettingVpnL2tpKeyDomain(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN)
}
