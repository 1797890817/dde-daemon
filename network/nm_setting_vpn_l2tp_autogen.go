// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)

// Get key type
func getSettingVpnL2tpKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		t = ktypeString
	case NM_SETTING_VPN_L2TP_KEY_USER:
		t = ktypeString
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS:
		t = ktypeUint32
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		t = ktypeString
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		t = ktypeString
	}
	return
}

// Check is key in current setting field
func isKeyInSettingVpnL2tp(key string) bool {
	switch key {
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		return true
	case NM_SETTING_VPN_L2TP_KEY_USER:
		return true
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS:
		return true
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		return true
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		return true
	}
	return false
}

// Get key's default value
func getSettingVpnL2tpDefaultValue(key string) (value interface{}) {
	switch key {
	default:
		logger.Error("invalid key:", key)
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		value = ""
	case NM_SETTING_VPN_L2TP_KEY_USER:
		value = ""
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS:
		value = 0
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		value = ""
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		value = ""
	}
	return
}

// Get JSON value generally
func generalGetSettingVpnL2tpKeyJSON(data connectionData, key string) (value string) {
	switch key {
	default:
		logger.Error("generalGetSettingVpnL2tpKeyJSON: invalide key", key)
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		value = getSettingVpnL2tpKeyGatewayJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_USER:
		value = getSettingVpnL2tpKeyUserJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS:
		value = getSettingVpnL2tpKeyPasswordFlagsJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		value = getSettingVpnL2tpKeyPasswordJSON(data)
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		value = getSettingVpnL2tpKeyDomainJSON(data)
	}
	return
}

// Set JSON value generally
func generalSetSettingVpnL2tpKeyJSON(data connectionData, key, valueJSON string) (err error) {
	switch key {
	default:
		logger.Error("generalSetSettingVpnL2tpKeyJSON: invalide key", key)
	case NM_SETTING_VPN_L2TP_KEY_GATEWAY:
		err = setSettingVpnL2tpKeyGatewayJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_USER:
		err = setSettingVpnL2tpKeyUserJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS:
		err = setSettingVpnL2tpKeyPasswordFlagsJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_PASSWORD:
		err = setSettingVpnL2tpKeyPasswordJSON(data, valueJSON)
	case NM_SETTING_VPN_L2TP_KEY_DOMAIN:
		err = setSettingVpnL2tpKeyDomainJSON(data, valueJSON)
	}
	return
}

// Check if key exists
func isSettingVpnL2tpKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY)
}
func isSettingVpnL2tpKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER)
}
func isSettingVpnL2tpKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS)
}
func isSettingVpnL2tpKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD)
}
func isSettingVpnL2tpKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN)
}

// Ensure field and key exists and not empty
func ensureFieldSettingVpnL2tpExists(data connectionData, errs fieldErrors, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME) {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_VF_VPN_L2TP_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_VF_VPN_L2TP_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_VF_VPN_L2TP_SETTING_NAME))
	}
}
func ensureSettingVpnL2tpKeyGatewayNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnL2tpKeyGatewayExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyGateway(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnL2tpKeyUserNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnL2tpKeyUserExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyUser(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnL2tpKeyPasswordFlagsNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnL2tpKeyPasswordFlagsExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnL2tpKeyPasswordNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnL2tpKeyPasswordExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnL2tpKeyDomainNoEmpty(data connectionData, errs fieldErrors) {
	if !isSettingVpnL2tpKeyDomainExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnL2tpKeyDomain(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, NM_KEY_ERROR_EMPTY_VALUE)
	}
}

// Getter
func getSettingVpnL2tpKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY)
	value, ok := ivalue.(string)
	if !ok {
		logger.Errorf("getSettingVpnL2tpKeyGateway: value type is invalid, should be string instead of %#v", ivalue)
	}
	return
}
func getSettingVpnL2tpKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER)
	value, ok := ivalue.(string)
	if !ok {
		logger.Errorf("getSettingVpnL2tpKeyUser: value type is invalid, should be string instead of %#v", ivalue)
	}
	return
}
func getSettingVpnL2tpKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS)
	value, ok := ivalue.(uint32)
	if !ok {
		logger.Errorf("getSettingVpnL2tpKeyPasswordFlags: value type is invalid, should be uint32 instead of %#v", ivalue)
	}
	return
}
func getSettingVpnL2tpKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD)
	value, ok := ivalue.(string)
	if !ok {
		logger.Errorf("getSettingVpnL2tpKeyPassword: value type is invalid, should be string instead of %#v", ivalue)
	}
	return
}
func getSettingVpnL2tpKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN)
	value, ok := ivalue.(string)
	if !ok {
		logger.Errorf("getSettingVpnL2tpKeyDomain: value type is invalid, should be string instead of %#v", ivalue)
	}
	return
}

// Setter
func setSettingVpnL2tpKeyGateway(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, value)
}
func setSettingVpnL2tpKeyUser(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, value)
}
func setSettingVpnL2tpKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS, value)
}
func setSettingVpnL2tpKeyPassword(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, value)
}
func setSettingVpnL2tpKeyDomain(data connectionData, value string) {
	setSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, value)
}

// JSON Getter
func getSettingVpnL2tpKeyGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_GATEWAY))
	return
}
func getSettingVpnL2tpKeyUserJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_USER))
	return
}
func getSettingVpnL2tpKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS))
	return
}
func getSettingVpnL2tpKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD))
	return
}
func getSettingVpnL2tpKeyDomainJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_DOMAIN))
	return
}

// JSON Setter
func setSettingVpnL2tpKeyGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_GATEWAY))
}
func setSettingVpnL2tpKeyUserJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_USER))
}
func setSettingVpnL2tpKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS))
}
func setSettingVpnL2tpKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_PASSWORD))
}
func setSettingVpnL2tpKeyDomainJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN, valueJSON, getSettingVpnL2tpKeyType(NM_SETTING_VPN_L2TP_KEY_DOMAIN))
}

// Logic JSON Setter

// Remover
func removeSettingVpnL2tpKeyGateway(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_GATEWAY)
}
func removeSettingVpnL2tpKeyUser(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_USER)
}
func removeSettingVpnL2tpKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD_FLAGS)
}
func removeSettingVpnL2tpKeyPassword(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_PASSWORD)
}
func removeSettingVpnL2tpKeyDomain(data connectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_L2TP_SETTING_NAME, NM_SETTING_VPN_L2TP_KEY_DOMAIN)
}
