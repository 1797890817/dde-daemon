// This file is automatically generated, please don't edit manully."
package main

import (
	"fmt"
)

// Get key type
func getSettingPppKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_PPP_NOAUTH:
		t = ktypeBoolean
	case NM_SETTING_PPP_REFUSE_EAP:
		t = ktypeBoolean
	case NM_SETTING_PPP_REFUSE_PAP:
		t = ktypeBoolean
	case NM_SETTING_PPP_REFUSE_CHAP:
		t = ktypeBoolean
	case NM_SETTING_PPP_REFUSE_MSCHAP:
		t = ktypeBoolean
	case NM_SETTING_PPP_REFUSE_MSCHAPV2:
		t = ktypeBoolean
	case NM_SETTING_PPP_NOBSDCOMP:
		t = ktypeBoolean
	case NM_SETTING_PPP_NODEFLATE:
		t = ktypeBoolean
	case NM_SETTING_PPP_NO_VJ_COMP:
		t = ktypeBoolean
	case NM_SETTING_PPP_REQUIRE_MPPE:
		t = ktypeBoolean
	case NM_SETTING_PPP_REQUIRE_MPPE_128:
		t = ktypeBoolean
	case NM_SETTING_PPP_MPPE_STATEFUL:
		t = ktypeBoolean
	case NM_SETTING_PPP_CRTSCTS:
		t = ktypeBoolean
	case NM_SETTING_PPP_BAUD:
		t = ktypeUint32
	case NM_SETTING_PPP_MRU:
		t = ktypeUint32
	case NM_SETTING_PPP_MTU:
		t = ktypeUint32
	case NM_SETTING_PPP_LCP_ECHO_FAILURE:
		t = ktypeUint32
	case NM_SETTING_PPP_LCP_ECHO_INTERVAL:
		t = ktypeUint32
	}
	return
}

// Check is key in current setting field
func isKeyInSettingPpp(key string) bool {
	switch key {
	case NM_SETTING_PPP_NOAUTH:
		return true
	case NM_SETTING_PPP_REFUSE_EAP:
		return true
	case NM_SETTING_PPP_REFUSE_PAP:
		return true
	case NM_SETTING_PPP_REFUSE_CHAP:
		return true
	case NM_SETTING_PPP_REFUSE_MSCHAP:
		return true
	case NM_SETTING_PPP_REFUSE_MSCHAPV2:
		return true
	case NM_SETTING_PPP_NOBSDCOMP:
		return true
	case NM_SETTING_PPP_NODEFLATE:
		return true
	case NM_SETTING_PPP_NO_VJ_COMP:
		return true
	case NM_SETTING_PPP_REQUIRE_MPPE:
		return true
	case NM_SETTING_PPP_REQUIRE_MPPE_128:
		return true
	case NM_SETTING_PPP_MPPE_STATEFUL:
		return true
	case NM_SETTING_PPP_CRTSCTS:
		return true
	case NM_SETTING_PPP_BAUD:
		return true
	case NM_SETTING_PPP_MRU:
		return true
	case NM_SETTING_PPP_MTU:
		return true
	case NM_SETTING_PPP_LCP_ECHO_FAILURE:
		return true
	case NM_SETTING_PPP_LCP_ECHO_INTERVAL:
		return true
	}
	return false
}

// Get key's default value
func getSettingPppKeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		LOGGER.Error("invalid key:", key)
	case NM_SETTING_PPP_NOAUTH:
		valueJSON = `true`
	case NM_SETTING_PPP_REFUSE_EAP:
		valueJSON = `false`
	case NM_SETTING_PPP_REFUSE_PAP:
		valueJSON = `false`
	case NM_SETTING_PPP_REFUSE_CHAP:
		valueJSON = `false`
	case NM_SETTING_PPP_REFUSE_MSCHAP:
		valueJSON = `false`
	case NM_SETTING_PPP_REFUSE_MSCHAPV2:
		valueJSON = `false`
	case NM_SETTING_PPP_NOBSDCOMP:
		valueJSON = `false`
	case NM_SETTING_PPP_NODEFLATE:
		valueJSON = `false`
	case NM_SETTING_PPP_NO_VJ_COMP:
		valueJSON = `false`
	case NM_SETTING_PPP_REQUIRE_MPPE:
		valueJSON = `false`
	case NM_SETTING_PPP_REQUIRE_MPPE_128:
		valueJSON = `false`
	case NM_SETTING_PPP_MPPE_STATEFUL:
		valueJSON = `false`
	case NM_SETTING_PPP_CRTSCTS:
		valueJSON = `false`
	case NM_SETTING_PPP_BAUD:
		valueJSON = `0`
	case NM_SETTING_PPP_MRU:
		valueJSON = `0`
	case NM_SETTING_PPP_MTU:
		valueJSON = `0`
	case NM_SETTING_PPP_LCP_ECHO_FAILURE:
		valueJSON = `0`
	case NM_SETTING_PPP_LCP_ECHO_INTERVAL:
		valueJSON = `0`
	}
	return
}

// Get JSON value generally
func generalGetSettingPppKeyJSON(data _ConnectionData, key string) (value string) {
	switch key {
	default:
		LOGGER.Error("generalGetSettingPppKeyJSON: invalide key", key)
	case NM_SETTING_PPP_NOAUTH:
		value = getSettingPppNoauthJSON(data)
	case NM_SETTING_PPP_REFUSE_EAP:
		value = getSettingPppRefuseEapJSON(data)
	case NM_SETTING_PPP_REFUSE_PAP:
		value = getSettingPppRefusePapJSON(data)
	case NM_SETTING_PPP_REFUSE_CHAP:
		value = getSettingPppRefuseChapJSON(data)
	case NM_SETTING_PPP_REFUSE_MSCHAP:
		value = getSettingPppRefuseMschapJSON(data)
	case NM_SETTING_PPP_REFUSE_MSCHAPV2:
		value = getSettingPppRefuseMschapv2JSON(data)
	case NM_SETTING_PPP_NOBSDCOMP:
		value = getSettingPppNobsdcompJSON(data)
	case NM_SETTING_PPP_NODEFLATE:
		value = getSettingPppNodeflateJSON(data)
	case NM_SETTING_PPP_NO_VJ_COMP:
		value = getSettingPppNoVjCompJSON(data)
	case NM_SETTING_PPP_REQUIRE_MPPE:
		value = getSettingPppRequireMppeJSON(data)
	case NM_SETTING_PPP_REQUIRE_MPPE_128:
		value = getSettingPppRequireMppe128JSON(data)
	case NM_SETTING_PPP_MPPE_STATEFUL:
		value = getSettingPppMppeStatefulJSON(data)
	case NM_SETTING_PPP_CRTSCTS:
		value = getSettingPppCrtsctsJSON(data)
	case NM_SETTING_PPP_BAUD:
		value = getSettingPppBaudJSON(data)
	case NM_SETTING_PPP_MRU:
		value = getSettingPppMruJSON(data)
	case NM_SETTING_PPP_MTU:
		value = getSettingPppMtuJSON(data)
	case NM_SETTING_PPP_LCP_ECHO_FAILURE:
		value = getSettingPppLcpEchoFailureJSON(data)
	case NM_SETTING_PPP_LCP_ECHO_INTERVAL:
		value = getSettingPppLcpEchoIntervalJSON(data)
	}
	return
}

// Check if key exists
func isSettingPppNoauthExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOAUTH)
}
func isSettingPppRefuseEapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_EAP)
}
func isSettingPppRefusePapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_PAP)
}
func isSettingPppRefuseChapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_CHAP)
}
func isSettingPppRefuseMschapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAP)
}
func isSettingPppRefuseMschapv2Exists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAPV2)
}
func isSettingPppNobsdcompExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOBSDCOMP)
}
func isSettingPppNodeflateExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NODEFLATE)
}
func isSettingPppNoVjCompExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NO_VJ_COMP)
}
func isSettingPppRequireMppeExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE)
}
func isSettingPppRequireMppe128Exists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE_128)
}
func isSettingPppMppeStatefulExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MPPE_STATEFUL)
}
func isSettingPppCrtsctsExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_CRTSCTS)
}
func isSettingPppBaudExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_BAUD)
}
func isSettingPppMruExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MRU)
}
func isSettingPppMtuExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MTU)
}
func isSettingPppLcpEchoFailureExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_FAILURE)
}
func isSettingPppLcpEchoIntervalExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_INTERVAL)
}

// Ensure field and key exists and not empty
func ensureFieldSettingPppExists(data _ConnectionData, errs map[string]string, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_PPP_SETTING_NAME) {
		rememberError(errs, relatedKey, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_PPP_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_PPP_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_PPP_SETTING_NAME))
	}
}
func ensureSettingPppNoauthNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppNoauthExists(data) {
		rememberError(errs, NM_SETTING_PPP_NOAUTH, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRefuseEapNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRefuseEapExists(data) {
		rememberError(errs, NM_SETTING_PPP_REFUSE_EAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRefusePapNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRefusePapExists(data) {
		rememberError(errs, NM_SETTING_PPP_REFUSE_PAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRefuseChapNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRefuseChapExists(data) {
		rememberError(errs, NM_SETTING_PPP_REFUSE_CHAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRefuseMschapNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRefuseMschapExists(data) {
		rememberError(errs, NM_SETTING_PPP_REFUSE_MSCHAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRefuseMschapv2NoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRefuseMschapv2Exists(data) {
		rememberError(errs, NM_SETTING_PPP_REFUSE_MSCHAPV2, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppNobsdcompNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppNobsdcompExists(data) {
		rememberError(errs, NM_SETTING_PPP_NOBSDCOMP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppNodeflateNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppNodeflateExists(data) {
		rememberError(errs, NM_SETTING_PPP_NODEFLATE, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppNoVjCompNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppNoVjCompExists(data) {
		rememberError(errs, NM_SETTING_PPP_NO_VJ_COMP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRequireMppeNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRequireMppeExists(data) {
		rememberError(errs, NM_SETTING_PPP_REQUIRE_MPPE, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppRequireMppe128NoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppRequireMppe128Exists(data) {
		rememberError(errs, NM_SETTING_PPP_REQUIRE_MPPE_128, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppMppeStatefulNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppMppeStatefulExists(data) {
		rememberError(errs, NM_SETTING_PPP_MPPE_STATEFUL, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppCrtsctsNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppCrtsctsExists(data) {
		rememberError(errs, NM_SETTING_PPP_CRTSCTS, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppBaudNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppBaudExists(data) {
		rememberError(errs, NM_SETTING_PPP_BAUD, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppMruNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppMruExists(data) {
		rememberError(errs, NM_SETTING_PPP_MRU, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppMtuNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppMtuExists(data) {
		rememberError(errs, NM_SETTING_PPP_MTU, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppLcpEchoFailureNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppLcpEchoFailureExists(data) {
		rememberError(errs, NM_SETTING_PPP_LCP_ECHO_FAILURE, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingPppLcpEchoIntervalNoEmpty(data _ConnectionData, errs map[string]string) {
	if !isSettingPppLcpEchoIntervalExists(data) {
		rememberError(errs, NM_SETTING_PPP_LCP_ECHO_INTERVAL, NM_KEY_ERROR_MISSING_VALUE)
	}
}

// Getter
func getSettingPppNoauth(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOAUTH).(bool)
	return
}
func getSettingPppRefuseEap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_EAP).(bool)
	return
}
func getSettingPppRefusePap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_PAP).(bool)
	return
}
func getSettingPppRefuseChap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_CHAP).(bool)
	return
}
func getSettingPppRefuseMschap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAP).(bool)
	return
}
func getSettingPppRefuseMschapv2(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAPV2).(bool)
	return
}
func getSettingPppNobsdcomp(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOBSDCOMP).(bool)
	return
}
func getSettingPppNodeflate(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NODEFLATE).(bool)
	return
}
func getSettingPppNoVjComp(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NO_VJ_COMP).(bool)
	return
}
func getSettingPppRequireMppe(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE).(bool)
	return
}
func getSettingPppRequireMppe128(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE_128).(bool)
	return
}
func getSettingPppMppeStateful(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MPPE_STATEFUL).(bool)
	return
}
func getSettingPppCrtscts(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_CRTSCTS).(bool)
	return
}
func getSettingPppBaud(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_BAUD).(uint32)
	return
}
func getSettingPppMru(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MRU).(uint32)
	return
}
func getSettingPppMtu(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MTU).(uint32)
	return
}
func getSettingPppLcpEchoFailure(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_FAILURE).(uint32)
	return
}
func getSettingPppLcpEchoInterval(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_INTERVAL).(uint32)
	return
}

// Setter
func setSettingPppNoauth(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOAUTH, value)
}
func setSettingPppRefuseEap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_EAP, value)
}
func setSettingPppRefusePap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_PAP, value)
}
func setSettingPppRefuseChap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_CHAP, value)
}
func setSettingPppRefuseMschap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAP, value)
}
func setSettingPppRefuseMschapv2(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAPV2, value)
}
func setSettingPppNobsdcomp(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOBSDCOMP, value)
}
func setSettingPppNodeflate(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NODEFLATE, value)
}
func setSettingPppNoVjComp(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NO_VJ_COMP, value)
}
func setSettingPppRequireMppe(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE, value)
}
func setSettingPppRequireMppe128(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE_128, value)
}
func setSettingPppMppeStateful(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MPPE_STATEFUL, value)
}
func setSettingPppCrtscts(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_CRTSCTS, value)
}
func setSettingPppBaud(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_BAUD, value)
}
func setSettingPppMru(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MRU, value)
}
func setSettingPppMtu(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MTU, value)
}
func setSettingPppLcpEchoFailure(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_FAILURE, value)
}
func setSettingPppLcpEchoInterval(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_INTERVAL, value)
}

// JSON Getter
func getSettingPppNoauthJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOAUTH, getSettingPppKeyType(NM_SETTING_PPP_NOAUTH))
	return
}
func getSettingPppRefuseEapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_EAP, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_EAP))
	return
}
func getSettingPppRefusePapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_PAP, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_PAP))
	return
}
func getSettingPppRefuseChapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_CHAP, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_CHAP))
	return
}
func getSettingPppRefuseMschapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAP, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_MSCHAP))
	return
}
func getSettingPppRefuseMschapv2JSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAPV2, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_MSCHAPV2))
	return
}
func getSettingPppNobsdcompJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOBSDCOMP, getSettingPppKeyType(NM_SETTING_PPP_NOBSDCOMP))
	return
}
func getSettingPppNodeflateJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NODEFLATE, getSettingPppKeyType(NM_SETTING_PPP_NODEFLATE))
	return
}
func getSettingPppNoVjCompJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NO_VJ_COMP, getSettingPppKeyType(NM_SETTING_PPP_NO_VJ_COMP))
	return
}
func getSettingPppRequireMppeJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE, getSettingPppKeyType(NM_SETTING_PPP_REQUIRE_MPPE))
	return
}
func getSettingPppRequireMppe128JSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE_128, getSettingPppKeyType(NM_SETTING_PPP_REQUIRE_MPPE_128))
	return
}
func getSettingPppMppeStatefulJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MPPE_STATEFUL, getSettingPppKeyType(NM_SETTING_PPP_MPPE_STATEFUL))
	return
}
func getSettingPppCrtsctsJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_CRTSCTS, getSettingPppKeyType(NM_SETTING_PPP_CRTSCTS))
	return
}
func getSettingPppBaudJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_BAUD, getSettingPppKeyType(NM_SETTING_PPP_BAUD))
	return
}
func getSettingPppMruJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MRU, getSettingPppKeyType(NM_SETTING_PPP_MRU))
	return
}
func getSettingPppMtuJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MTU, getSettingPppKeyType(NM_SETTING_PPP_MTU))
	return
}
func getSettingPppLcpEchoFailureJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_FAILURE, getSettingPppKeyType(NM_SETTING_PPP_LCP_ECHO_FAILURE))
	return
}
func getSettingPppLcpEchoIntervalJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_INTERVAL, getSettingPppKeyType(NM_SETTING_PPP_LCP_ECHO_INTERVAL))
	return
}

// JSON Setter
func setSettingPppNoauthJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOAUTH, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_NOAUTH))
}
func setSettingPppRefuseEapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_EAP, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_EAP))
}
func setSettingPppRefusePapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_PAP, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_PAP))
}
func setSettingPppRefuseChapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_CHAP, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_CHAP))
}
func setSettingPppRefuseMschapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAP, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_MSCHAP))
}
func setSettingPppRefuseMschapv2JSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAPV2, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REFUSE_MSCHAPV2))
}
func setSettingPppNobsdcompJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOBSDCOMP, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_NOBSDCOMP))
}
func setSettingPppNodeflateJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NODEFLATE, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_NODEFLATE))
}
func setSettingPppNoVjCompJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NO_VJ_COMP, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_NO_VJ_COMP))
}
func setSettingPppRequireMppeJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REQUIRE_MPPE))
}
func setSettingPppRequireMppe128JSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE_128, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_REQUIRE_MPPE_128))
}
func setSettingPppMppeStatefulJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MPPE_STATEFUL, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_MPPE_STATEFUL))
}
func setSettingPppCrtsctsJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_CRTSCTS, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_CRTSCTS))
}
func setSettingPppBaudJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_BAUD, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_BAUD))
}
func setSettingPppMruJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MRU, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_MRU))
}
func setSettingPppMtuJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MTU, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_MTU))
}
func setSettingPppLcpEchoFailureJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_FAILURE, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_LCP_ECHO_FAILURE))
}
func setSettingPppLcpEchoIntervalJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_INTERVAL, valueJSON, getSettingPppKeyType(NM_SETTING_PPP_LCP_ECHO_INTERVAL))
}

// Remover
func removeSettingPppNoauth(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOAUTH)
}
func removeSettingPppRefuseEap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_EAP)
}
func removeSettingPppRefusePap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_PAP)
}
func removeSettingPppRefuseChap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_CHAP)
}
func removeSettingPppRefuseMschap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAP)
}
func removeSettingPppRefuseMschapv2(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REFUSE_MSCHAPV2)
}
func removeSettingPppNobsdcomp(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NOBSDCOMP)
}
func removeSettingPppNodeflate(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NODEFLATE)
}
func removeSettingPppNoVjComp(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_NO_VJ_COMP)
}
func removeSettingPppRequireMppe(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE)
}
func removeSettingPppRequireMppe128(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_REQUIRE_MPPE_128)
}
func removeSettingPppMppeStateful(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MPPE_STATEFUL)
}
func removeSettingPppCrtscts(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_CRTSCTS)
}
func removeSettingPppBaud(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_BAUD)
}
func removeSettingPppMru(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MRU)
}
func removeSettingPppMtu(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_MTU)
}
func removeSettingPppLcpEchoFailure(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_FAILURE)
}
func removeSettingPppLcpEchoInterval(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_PPP_SETTING_NAME, NM_SETTING_PPP_LCP_ECHO_INTERVAL)
}
