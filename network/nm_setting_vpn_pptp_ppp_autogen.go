// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)

// Get key type
func getSettingVpnPptpPppKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_NODEFLATE:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP:
		t = ktypeBoolean
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE:
		t = ktypeUint32
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL:
		t = ktypeUint32
	}
	return
}

// Check is key in current setting field
func isKeyInSettingVpnPptpPpp(key string) bool {
	switch key {
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40:
		return true
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128:
		return true
	case NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL:
		return true
	case NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP:
		return true
	case NM_SETTING_VPN_PPTP_KEY_NODEFLATE:
		return true
	case NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP:
		return true
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE:
		return true
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL:
		return true
	}
	return false
}

// Get key's default value
func getSettingVpnPptpPppKeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		Logger.Error("invalid key:", key)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_NODEFLATE:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP:
		valueJSON = `false`
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE:
		valueJSON = `0`
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL:
		valueJSON = `0`
	}
	return
}

// Get JSON value generally
func generalGetSettingVpnPptpPppKeyJSON(data _ConnectionData, key string) (value string) {
	switch key {
	default:
		Logger.Error("generalGetSettingVpnPptpPppKeyJSON: invalide key", key)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP:
		value = getSettingVpnPptpKeyRefuseEapJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP:
		value = getSettingVpnPptpKeyRefusePapJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP:
		value = getSettingVpnPptpKeyRefuseChapJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP:
		value = getSettingVpnPptpKeyRefuseMschapJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2:
		value = getSettingVpnPptpKeyRefuseMschapv2JSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE:
		value = getSettingVpnPptpKeyRequireMppeJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40:
		value = getSettingVpnPptpKeyRequireMppe40JSON(data)
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128:
		value = getSettingVpnPptpKeyRequireMppe128JSON(data)
	case NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL:
		value = getSettingVpnPptpKeyMppeStatefulJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP:
		value = getSettingVpnPptpKeyNobsdcompJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_NODEFLATE:
		value = getSettingVpnPptpKeyNodeflateJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP:
		value = getSettingVpnPptpKeyNoVjCompJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE:
		value = getSettingVpnPptpKeyLcpEchoFailureJSON(data)
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL:
		value = getSettingVpnPptpKeyLcpEchoIntervalJSON(data)
	}
	return
}

// Set JSON value generally
func generalSetSettingVpnPptpPppKeyJSON(data _ConnectionData, key, valueJSON string) {
	switch key {
	default:
		Logger.Error("generalSetSettingVpnPptpPppKeyJSON: invalide key", key)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP:
		setSettingVpnPptpKeyRefuseEapJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP:
		setSettingVpnPptpKeyRefusePapJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP:
		setSettingVpnPptpKeyRefuseChapJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP:
		setSettingVpnPptpKeyRefuseMschapJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2:
		setSettingVpnPptpKeyRefuseMschapv2JSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE:
		logicSetSettingVpnPptpKeyRequireMppeJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40:
		setSettingVpnPptpKeyRequireMppe40JSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128:
		setSettingVpnPptpKeyRequireMppe128JSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL:
		setSettingVpnPptpKeyMppeStatefulJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP:
		setSettingVpnPptpKeyNobsdcompJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_NODEFLATE:
		setSettingVpnPptpKeyNodeflateJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP:
		setSettingVpnPptpKeyNoVjCompJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE:
		setSettingVpnPptpKeyLcpEchoFailureJSON(data, valueJSON)
	case NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL:
		setSettingVpnPptpKeyLcpEchoIntervalJSON(data, valueJSON)
	}
	return
}

// Check if key exists
func isSettingVpnPptpKeyRefuseEapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP)
}
func isSettingVpnPptpKeyRefusePapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP)
}
func isSettingVpnPptpKeyRefuseChapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP)
}
func isSettingVpnPptpKeyRefuseMschapExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP)
}
func isSettingVpnPptpKeyRefuseMschapv2Exists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2)
}
func isSettingVpnPptpKeyRequireMppeExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE)
}
func isSettingVpnPptpKeyRequireMppe40Exists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40)
}
func isSettingVpnPptpKeyRequireMppe128Exists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128)
}
func isSettingVpnPptpKeyMppeStatefulExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL)
}
func isSettingVpnPptpKeyNobsdcompExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP)
}
func isSettingVpnPptpKeyNodeflateExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE)
}
func isSettingVpnPptpKeyNoVjCompExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP)
}
func isSettingVpnPptpKeyLcpEchoFailureExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE)
}
func isSettingVpnPptpKeyLcpEchoIntervalExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL)
}

// Ensure field and key exists and not empty
func ensureFieldSettingVpnPptpPppExists(data _ConnectionData, errs FieldKeyErrors, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME) {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME))
	}
}
func ensureSettingVpnPptpKeyRefuseEapNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRefuseEapExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRefusePapNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRefusePapExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRefuseChapNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRefuseChapExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRefuseMschapNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRefuseMschapExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRefuseMschapv2NoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRefuseMschapv2Exists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRequireMppeNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRequireMppeExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRequireMppe40NoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRequireMppe40Exists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyRequireMppe128NoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyRequireMppe128Exists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyMppeStatefulNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyMppeStatefulExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyNobsdcompNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyNobsdcompExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyNodeflateNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyNodeflateExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyNoVjCompNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyNoVjCompExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyLcpEchoFailureNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyLcpEchoFailureExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE, NM_KEY_ERROR_MISSING_VALUE)
	}
}
func ensureSettingVpnPptpKeyLcpEchoIntervalNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnPptpKeyLcpEchoIntervalExists(data) {
		rememberError(errs, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL, NM_KEY_ERROR_MISSING_VALUE)
	}
}

// Getter
func getSettingVpnPptpKeyRefuseEap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP).(bool)
	return
}
func getSettingVpnPptpKeyRefusePap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP).(bool)
	return
}
func getSettingVpnPptpKeyRefuseChap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP).(bool)
	return
}
func getSettingVpnPptpKeyRefuseMschap(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP).(bool)
	return
}
func getSettingVpnPptpKeyRefuseMschapv2(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2).(bool)
	return
}
func getSettingVpnPptpKeyRequireMppe(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE).(bool)
	return
}
func getSettingVpnPptpKeyRequireMppe40(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40).(bool)
	return
}
func getSettingVpnPptpKeyRequireMppe128(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128).(bool)
	return
}
func getSettingVpnPptpKeyMppeStateful(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL).(bool)
	return
}
func getSettingVpnPptpKeyNobsdcomp(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP).(bool)
	return
}
func getSettingVpnPptpKeyNodeflate(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE).(bool)
	return
}
func getSettingVpnPptpKeyNoVjComp(data _ConnectionData) (value bool) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP).(bool)
	return
}
func getSettingVpnPptpKeyLcpEchoFailure(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE).(uint32)
	return
}
func getSettingVpnPptpKeyLcpEchoInterval(data _ConnectionData) (value uint32) {
	value, _ = getSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL).(uint32)
	return
}

// Setter
func setSettingVpnPptpKeyRefuseEap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP, value)
}
func setSettingVpnPptpKeyRefusePap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP, value)
}
func setSettingVpnPptpKeyRefuseChap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP, value)
}
func setSettingVpnPptpKeyRefuseMschap(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP, value)
}
func setSettingVpnPptpKeyRefuseMschapv2(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2, value)
}
func setSettingVpnPptpKeyRequireMppe(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE, value)
}
func setSettingVpnPptpKeyRequireMppe40(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40, value)
}
func setSettingVpnPptpKeyRequireMppe128(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128, value)
}
func setSettingVpnPptpKeyMppeStateful(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL, value)
}
func setSettingVpnPptpKeyNobsdcomp(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP, value)
}
func setSettingVpnPptpKeyNodeflate(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE, value)
}
func setSettingVpnPptpKeyNoVjComp(data _ConnectionData, value bool) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP, value)
}
func setSettingVpnPptpKeyLcpEchoFailure(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE, value)
}
func setSettingVpnPptpKeyLcpEchoInterval(data _ConnectionData, value uint32) {
	setSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL, value)
}

// JSON Getter
func getSettingVpnPptpKeyRefuseEapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP))
	return
}
func getSettingVpnPptpKeyRefusePapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP))
	return
}
func getSettingVpnPptpKeyRefuseChapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP))
	return
}
func getSettingVpnPptpKeyRefuseMschapJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP))
	return
}
func getSettingVpnPptpKeyRefuseMschapv2JSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2))
	return
}
func getSettingVpnPptpKeyRequireMppeJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE))
	return
}
func getSettingVpnPptpKeyRequireMppe40JSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40))
	return
}
func getSettingVpnPptpKeyRequireMppe128JSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128))
	return
}
func getSettingVpnPptpKeyMppeStatefulJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL))
	return
}
func getSettingVpnPptpKeyNobsdcompJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP))
	return
}
func getSettingVpnPptpKeyNodeflateJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_NODEFLATE))
	return
}
func getSettingVpnPptpKeyNoVjCompJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP))
	return
}
func getSettingVpnPptpKeyLcpEchoFailureJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE))
	return
}
func getSettingVpnPptpKeyLcpEchoIntervalJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL))
	return
}

// JSON Setter
func setSettingVpnPptpKeyRefuseEapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP))
}
func setSettingVpnPptpKeyRefusePapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP))
}
func setSettingVpnPptpKeyRefuseChapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP))
}
func setSettingVpnPptpKeyRefuseMschapJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP))
}
func setSettingVpnPptpKeyRefuseMschapv2JSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2))
}
func setSettingVpnPptpKeyRequireMppeJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE))
}
func setSettingVpnPptpKeyRequireMppe40JSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40))
}
func setSettingVpnPptpKeyRequireMppe128JSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128))
}
func setSettingVpnPptpKeyMppeStatefulJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL))
}
func setSettingVpnPptpKeyNobsdcompJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP))
}
func setSettingVpnPptpKeyNodeflateJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_NODEFLATE))
}
func setSettingVpnPptpKeyNoVjCompJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP))
}
func setSettingVpnPptpKeyLcpEchoFailureJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE))
}
func setSettingVpnPptpKeyLcpEchoIntervalJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL, valueJSON, getSettingVpnPptpPppKeyType(NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL))
}

// Remover
func removeSettingVpnPptpKeyRefuseEap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_EAP)
}
func removeSettingVpnPptpKeyRefusePap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_PAP)
}
func removeSettingVpnPptpKeyRefuseChap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_CHAP)
}
func removeSettingVpnPptpKeyRefuseMschap(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAP)
}
func removeSettingVpnPptpKeyRefuseMschapv2(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REFUSE_MSCHAPV2)
}
func removeSettingVpnPptpKeyRequireMppe(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE)
}
func removeSettingVpnPptpKeyRequireMppe40(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40)
}
func removeSettingVpnPptpKeyRequireMppe128(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128)
}
func removeSettingVpnPptpKeyMppeStateful(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_MPPE_STATEFUL)
}
func removeSettingVpnPptpKeyNobsdcomp(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NOBSDCOMP)
}
func removeSettingVpnPptpKeyNodeflate(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NODEFLATE)
}
func removeSettingVpnPptpKeyNoVjComp(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_NO_VJ_COMP)
}
func removeSettingVpnPptpKeyLcpEchoFailure(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE)
}
func removeSettingVpnPptpKeyLcpEchoInterval(data _ConnectionData) {
	removeSettingKey(data, NM_SETTING_VF_VPN_PPTP_PPP_SETTING_NAME, NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL)
}
