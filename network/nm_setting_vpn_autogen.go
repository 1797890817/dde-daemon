// This file is automatically generated, please don't edit manully.
package main

import (
	"fmt"
)

// Get key type
func getSettingVpnKeyType(key string) (t ktype) {
	switch key {
	default:
		t = ktypeUnknown
	case NM_SETTING_VPN_SERVICE_TYPE:
		t = ktypeString
	case NM_SETTING_VPN_USER_NAME:
		t = ktypeString
	case NM_SETTING_VPN_DATA:
		t = ktypeDictStringString
	case NM_SETTING_VPN_SECRETS:
		t = ktypeDictStringString
	}
	return
}

// Check is key in current setting field
func isKeyInSettingVpn(key string) bool {
	switch key {
	case NM_SETTING_VPN_SERVICE_TYPE:
		return true
	case NM_SETTING_VPN_USER_NAME:
		return true
	case NM_SETTING_VPN_DATA:
		return true
	case NM_SETTING_VPN_SECRETS:
		return true
	}
	return false
}

// Get key's default value
func getSettingVpnKeyDefaultValueJSON(key string) (valueJSON string) {
	switch key {
	default:
		Logger.Error("invalid key:", key)
	case NM_SETTING_VPN_SERVICE_TYPE:
		valueJSON = `""`
	case NM_SETTING_VPN_USER_NAME:
		valueJSON = `""`
	case NM_SETTING_VPN_DATA:
		valueJSON = `null`
	case NM_SETTING_VPN_SECRETS:
		valueJSON = `null`
	}
	return
}

// Get JSON value generally
func generalGetSettingVpnKeyJSON(data _ConnectionData, key string) (value string) {
	switch key {
	default:
		Logger.Error("generalGetSettingVpnKeyJSON: invalide key", key)
	case NM_SETTING_VPN_SERVICE_TYPE:
		value = getSettingVpnServiceTypeJSON(data)
	case NM_SETTING_VPN_USER_NAME:
		value = getSettingVpnUserNameJSON(data)
	case NM_SETTING_VPN_DATA:
		value = getSettingVpnDataJSON(data)
	case NM_SETTING_VPN_SECRETS:
		value = getSettingVpnSecretsJSON(data)
	}
	return
}

// Set JSON value generally
func generalSetSettingVpnKeyJSON(data _ConnectionData, key, valueJSON string) {
	switch key {
	default:
		Logger.Error("generalSetSettingVpnKeyJSON: invalide key", key)
	case NM_SETTING_VPN_SERVICE_TYPE:
		setSettingVpnServiceTypeJSON(data, valueJSON)
	case NM_SETTING_VPN_USER_NAME:
		setSettingVpnUserNameJSON(data, valueJSON)
	case NM_SETTING_VPN_DATA:
		setSettingVpnDataJSON(data, valueJSON)
	case NM_SETTING_VPN_SECRETS:
		setSettingVpnSecretsJSON(data, valueJSON)
	}
	return
}

// Check if key exists
func isSettingVpnServiceTypeExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SERVICE_TYPE)
}
func isSettingVpnUserNameExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_USER_NAME)
}
func isSettingVpnDataExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_DATA)
}
func isSettingVpnSecretsExists(data _ConnectionData) bool {
	return isSettingKeyExists(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SECRETS)
}

// Ensure field and key exists and not empty
func ensureFieldSettingVpnExists(data _ConnectionData, errs FieldKeyErrors, relatedKey string) {
	if !isSettingFieldExists(data, NM_SETTING_VPN_SETTING_NAME) {
		rememberError(errs, relatedKey, NM_SETTING_VPN_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_MISSING_SECTION, NM_SETTING_VPN_SETTING_NAME))
	}
	fieldData, _ := data[NM_SETTING_VPN_SETTING_NAME]
	if len(fieldData) == 0 {
		rememberError(errs, relatedKey, NM_SETTING_VPN_SETTING_NAME, fmt.Sprintf(NM_KEY_ERROR_EMPTY_SECTION, NM_SETTING_VPN_SETTING_NAME))
	}
}
func ensureSettingVpnServiceTypeNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnServiceTypeExists(data) {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SERVICE_TYPE, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnServiceType(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SERVICE_TYPE, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnUserNameNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnUserNameExists(data) {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_USER_NAME, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnUserName(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_USER_NAME, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnDataNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnDataExists(data) {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_DATA, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnData(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_DATA, NM_KEY_ERROR_EMPTY_VALUE)
	}
}
func ensureSettingVpnSecretsNoEmpty(data _ConnectionData, errs FieldKeyErrors) {
	if !isSettingVpnSecretsExists(data) {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SECRETS, NM_KEY_ERROR_MISSING_VALUE)
	}
	value := getSettingVpnSecrets(data)
	if len(value) == 0 {
		rememberError(errs, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SECRETS, NM_KEY_ERROR_EMPTY_VALUE)
	}
}

// Getter
func getSettingVpnServiceType(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_SERVICE_TYPE).(string)
	return
}
func getSettingVpnUserName(data _ConnectionData) (value string) {
	value, _ = getSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_USER_NAME).(string)
	return
}
func getSettingVpnData(data _ConnectionData) (value map[string]string) {
	value, _ = getSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_DATA).(map[string]string)
	return
}
func getSettingVpnSecrets(data _ConnectionData) (value map[string]string) {
	value, _ = getSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_SECRETS).(map[string]string)
	return
}

// Setter
func setSettingVpnServiceType(data _ConnectionData, value string) {
	setSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_SERVICE_TYPE, value)
}
func setSettingVpnUserName(data _ConnectionData, value string) {
	setSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_USER_NAME, value)
}
func setSettingVpnData(data _ConnectionData, value map[string]string) {
	setSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_DATA, value)
}
func setSettingVpnSecrets(data _ConnectionData, value map[string]string) {
	setSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_SECRETS, value)
}

// JSON Getter
func getSettingVpnServiceTypeJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SERVICE_TYPE, getSettingVpnKeyType(NM_SETTING_VPN_SERVICE_TYPE))
	return
}
func getSettingVpnUserNameJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_USER_NAME, getSettingVpnKeyType(NM_SETTING_VPN_USER_NAME))
	return
}
func getSettingVpnDataJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_DATA, getSettingVpnKeyType(NM_SETTING_VPN_DATA))
	return
}
func getSettingVpnSecretsJSON(data _ConnectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SECRETS, getSettingVpnKeyType(NM_SETTING_VPN_SECRETS))
	return
}

// JSON Setter
func setSettingVpnServiceTypeJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SERVICE_TYPE, valueJSON, getSettingVpnKeyType(NM_SETTING_VPN_SERVICE_TYPE))
}
func setSettingVpnUserNameJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_USER_NAME, valueJSON, getSettingVpnKeyType(NM_SETTING_VPN_USER_NAME))
}
func setSettingVpnDataJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_DATA, valueJSON, getSettingVpnKeyType(NM_SETTING_VPN_DATA))
}
func setSettingVpnSecretsJSON(data _ConnectionData, valueJSON string) {
	setSettingKeyJSON(data, NM_SETTING_VPN_SETTING_NAME, NM_SETTING_VPN_SECRETS, valueJSON, getSettingVpnKeyType(NM_SETTING_VPN_SECRETS))
}

// Remover
func removeSettingVpnServiceType(data _ConnectionData) {
	removeSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_SERVICE_TYPE)
}
func removeSettingVpnUserName(data _ConnectionData) {
	removeSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_USER_NAME)
}
func removeSettingVpnData(data _ConnectionData) {
	removeSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_DATA)
}
func removeSettingVpnSecrets(data _ConnectionData) {
	removeSettingKey(data, getRealFiledName(NM_SETTING_VPN_SETTING_NAME), NM_SETTING_VPN_SECRETS)
}
